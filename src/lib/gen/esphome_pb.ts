// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file esphome.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum EntityCategory
 */
export enum EntityCategory {
  /**
   * @generated from enum value: ENTITY_CATEGORY_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: ENTITY_CATEGORY_CONFIG = 1;
   */
  CONFIG = 1,

  /**
   * @generated from enum value: ENTITY_CATEGORY_DIAGNOSTIC = 2;
   */
  DIAGNOSTIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EntityCategory)
proto3.util.setEnumType(EntityCategory, "EntityCategory", [
  { no: 0, name: "ENTITY_CATEGORY_NONE" },
  { no: 1, name: "ENTITY_CATEGORY_CONFIG" },
  { no: 2, name: "ENTITY_CATEGORY_DIAGNOSTIC" },
]);

/**
 * @generated from enum LegacyCoverState
 */
export enum LegacyCoverState {
  /**
   * @generated from enum value: LEGACY_COVER_STATE_OPEN = 0;
   */
  OPEN = 0,

  /**
   * @generated from enum value: LEGACY_COVER_STATE_CLOSED = 1;
   */
  CLOSED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(LegacyCoverState)
proto3.util.setEnumType(LegacyCoverState, "LegacyCoverState", [
  { no: 0, name: "LEGACY_COVER_STATE_OPEN" },
  { no: 1, name: "LEGACY_COVER_STATE_CLOSED" },
]);

/**
 * @generated from enum CoverOperation
 */
export enum CoverOperation {
  /**
   * @generated from enum value: COVER_OPERATION_IDLE = 0;
   */
  IDLE = 0,

  /**
   * @generated from enum value: COVER_OPERATION_IS_OPENING = 1;
   */
  IS_OPENING = 1,

  /**
   * @generated from enum value: COVER_OPERATION_IS_CLOSING = 2;
   */
  IS_CLOSING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CoverOperation)
proto3.util.setEnumType(CoverOperation, "CoverOperation", [
  { no: 0, name: "COVER_OPERATION_IDLE" },
  { no: 1, name: "COVER_OPERATION_IS_OPENING" },
  { no: 2, name: "COVER_OPERATION_IS_CLOSING" },
]);

/**
 * @generated from enum LegacyCoverCommand
 */
export enum LegacyCoverCommand {
  /**
   * @generated from enum value: LEGACY_COVER_COMMAND_OPEN = 0;
   */
  OPEN = 0,

  /**
   * @generated from enum value: LEGACY_COVER_COMMAND_CLOSE = 1;
   */
  CLOSE = 1,

  /**
   * @generated from enum value: LEGACY_COVER_COMMAND_STOP = 2;
   */
  STOP = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(LegacyCoverCommand)
proto3.util.setEnumType(LegacyCoverCommand, "LegacyCoverCommand", [
  { no: 0, name: "LEGACY_COVER_COMMAND_OPEN" },
  { no: 1, name: "LEGACY_COVER_COMMAND_CLOSE" },
  { no: 2, name: "LEGACY_COVER_COMMAND_STOP" },
]);

/**
 * @generated from enum FanSpeed
 */
export enum FanSpeed {
  /**
   * @generated from enum value: FAN_SPEED_LOW = 0;
   */
  LOW = 0,

  /**
   * @generated from enum value: FAN_SPEED_MEDIUM = 1;
   */
  MEDIUM = 1,

  /**
   * @generated from enum value: FAN_SPEED_HIGH = 2;
   */
  HIGH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FanSpeed)
proto3.util.setEnumType(FanSpeed, "FanSpeed", [
  { no: 0, name: "FAN_SPEED_LOW" },
  { no: 1, name: "FAN_SPEED_MEDIUM" },
  { no: 2, name: "FAN_SPEED_HIGH" },
]);

/**
 * @generated from enum FanDirection
 */
export enum FanDirection {
  /**
   * @generated from enum value: FAN_DIRECTION_FORWARD = 0;
   */
  FORWARD = 0,

  /**
   * @generated from enum value: FAN_DIRECTION_REVERSE = 1;
   */
  REVERSE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(FanDirection)
proto3.util.setEnumType(FanDirection, "FanDirection", [
  { no: 0, name: "FAN_DIRECTION_FORWARD" },
  { no: 1, name: "FAN_DIRECTION_REVERSE" },
]);

/**
 * ==================== LIGHT ====================
 *
 * @generated from enum ColorMode
 */
export enum ColorMode {
  /**
   * @generated from enum value: COLOR_MODE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COLOR_MODE_ON_OFF = 1;
   */
  ON_OFF = 1,

  /**
   * @generated from enum value: COLOR_MODE_BRIGHTNESS = 2;
   */
  BRIGHTNESS = 2,

  /**
   * @generated from enum value: COLOR_MODE_WHITE = 7;
   */
  WHITE = 7,

  /**
   * @generated from enum value: COLOR_MODE_COLOR_TEMPERATURE = 11;
   */
  COLOR_TEMPERATURE = 11,

  /**
   * @generated from enum value: COLOR_MODE_COLD_WARM_WHITE = 19;
   */
  COLD_WARM_WHITE = 19,

  /**
   * @generated from enum value: COLOR_MODE_RGB = 35;
   */
  RGB = 35,

  /**
   * @generated from enum value: COLOR_MODE_RGB_WHITE = 39;
   */
  RGB_WHITE = 39,

  /**
   * @generated from enum value: COLOR_MODE_RGB_COLOR_TEMPERATURE = 47;
   */
  RGB_COLOR_TEMPERATURE = 47,

  /**
   * @generated from enum value: COLOR_MODE_RGB_COLD_WARM_WHITE = 51;
   */
  RGB_COLD_WARM_WHITE = 51,
}
// Retrieve enum metadata with: proto3.getEnumType(ColorMode)
proto3.util.setEnumType(ColorMode, "ColorMode", [
  { no: 0, name: "COLOR_MODE_UNKNOWN" },
  { no: 1, name: "COLOR_MODE_ON_OFF" },
  { no: 2, name: "COLOR_MODE_BRIGHTNESS" },
  { no: 7, name: "COLOR_MODE_WHITE" },
  { no: 11, name: "COLOR_MODE_COLOR_TEMPERATURE" },
  { no: 19, name: "COLOR_MODE_COLD_WARM_WHITE" },
  { no: 35, name: "COLOR_MODE_RGB" },
  { no: 39, name: "COLOR_MODE_RGB_WHITE" },
  { no: 47, name: "COLOR_MODE_RGB_COLOR_TEMPERATURE" },
  { no: 51, name: "COLOR_MODE_RGB_COLD_WARM_WHITE" },
]);

/**
 * ==================== SENSOR ====================
 *
 * @generated from enum SensorStateClass
 */
export enum SensorStateClass {
  /**
   * @generated from enum value: STATE_CLASS_NONE = 0;
   */
  STATE_CLASS_NONE = 0,

  /**
   * @generated from enum value: STATE_CLASS_MEASUREMENT = 1;
   */
  STATE_CLASS_MEASUREMENT = 1,

  /**
   * @generated from enum value: STATE_CLASS_TOTAL_INCREASING = 2;
   */
  STATE_CLASS_TOTAL_INCREASING = 2,

  /**
   * @generated from enum value: STATE_CLASS_TOTAL = 3;
   */
  STATE_CLASS_TOTAL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SensorStateClass)
proto3.util.setEnumType(SensorStateClass, "SensorStateClass", [
  { no: 0, name: "STATE_CLASS_NONE" },
  { no: 1, name: "STATE_CLASS_MEASUREMENT" },
  { no: 2, name: "STATE_CLASS_TOTAL_INCREASING" },
  { no: 3, name: "STATE_CLASS_TOTAL" },
]);

/**
 * @generated from enum SensorLastResetType
 */
export enum SensorLastResetType {
  /**
   * @generated from enum value: LAST_RESET_NONE = 0;
   */
  LAST_RESET_NONE = 0,

  /**
   * @generated from enum value: LAST_RESET_NEVER = 1;
   */
  LAST_RESET_NEVER = 1,

  /**
   * @generated from enum value: LAST_RESET_AUTO = 2;
   */
  LAST_RESET_AUTO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SensorLastResetType)
proto3.util.setEnumType(SensorLastResetType, "SensorLastResetType", [
  { no: 0, name: "LAST_RESET_NONE" },
  { no: 1, name: "LAST_RESET_NEVER" },
  { no: 2, name: "LAST_RESET_AUTO" },
]);

/**
 * ==================== SUBSCRIBE LOGS ====================
 *
 * @generated from enum LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 2;
   */
  WARN = 2,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 3;
   */
  INFO = 3,

  /**
   * @generated from enum value: LOG_LEVEL_CONFIG = 4;
   */
  CONFIG = 4,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 5;
   */
  DEBUG = 5,

  /**
   * @generated from enum value: LOG_LEVEL_VERBOSE = 6;
   */
  VERBOSE = 6,

  /**
   * @generated from enum value: LOG_LEVEL_VERY_VERBOSE = 7;
   */
  VERY_VERBOSE = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "LogLevel", [
  { no: 0, name: "LOG_LEVEL_NONE" },
  { no: 1, name: "LOG_LEVEL_ERROR" },
  { no: 2, name: "LOG_LEVEL_WARN" },
  { no: 3, name: "LOG_LEVEL_INFO" },
  { no: 4, name: "LOG_LEVEL_CONFIG" },
  { no: 5, name: "LOG_LEVEL_DEBUG" },
  { no: 6, name: "LOG_LEVEL_VERBOSE" },
  { no: 7, name: "LOG_LEVEL_VERY_VERBOSE" },
]);

/**
 * ==================== USER-DEFINES SERVICES ====================
 *
 * @generated from enum ServiceArgType
 */
export enum ServiceArgType {
  /**
   * @generated from enum value: SERVICE_ARG_TYPE_BOOL = 0;
   */
  BOOL = 0,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_INT = 1;
   */
  INT = 1,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_FLOAT = 2;
   */
  FLOAT = 2,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_STRING = 3;
   */
  STRING = 3,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_BOOL_ARRAY = 4;
   */
  BOOL_ARRAY = 4,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_INT_ARRAY = 5;
   */
  INT_ARRAY = 5,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_FLOAT_ARRAY = 6;
   */
  FLOAT_ARRAY = 6,

  /**
   * @generated from enum value: SERVICE_ARG_TYPE_STRING_ARRAY = 7;
   */
  STRING_ARRAY = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceArgType)
proto3.util.setEnumType(ServiceArgType, "ServiceArgType", [
  { no: 0, name: "SERVICE_ARG_TYPE_BOOL" },
  { no: 1, name: "SERVICE_ARG_TYPE_INT" },
  { no: 2, name: "SERVICE_ARG_TYPE_FLOAT" },
  { no: 3, name: "SERVICE_ARG_TYPE_STRING" },
  { no: 4, name: "SERVICE_ARG_TYPE_BOOL_ARRAY" },
  { no: 5, name: "SERVICE_ARG_TYPE_INT_ARRAY" },
  { no: 6, name: "SERVICE_ARG_TYPE_FLOAT_ARRAY" },
  { no: 7, name: "SERVICE_ARG_TYPE_STRING_ARRAY" },
]);

/**
 * ==================== CLIMATE ====================
 *
 * @generated from enum ClimateMode
 */
export enum ClimateMode {
  /**
   * @generated from enum value: CLIMATE_MODE_OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: CLIMATE_MODE_HEAT_COOL = 1;
   */
  HEAT_COOL = 1,

  /**
   * @generated from enum value: CLIMATE_MODE_COOL = 2;
   */
  COOL = 2,

  /**
   * @generated from enum value: CLIMATE_MODE_HEAT = 3;
   */
  HEAT = 3,

  /**
   * @generated from enum value: CLIMATE_MODE_FAN_ONLY = 4;
   */
  FAN_ONLY = 4,

  /**
   * @generated from enum value: CLIMATE_MODE_DRY = 5;
   */
  DRY = 5,

  /**
   * @generated from enum value: CLIMATE_MODE_AUTO = 6;
   */
  AUTO = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(ClimateMode)
proto3.util.setEnumType(ClimateMode, "ClimateMode", [
  { no: 0, name: "CLIMATE_MODE_OFF" },
  { no: 1, name: "CLIMATE_MODE_HEAT_COOL" },
  { no: 2, name: "CLIMATE_MODE_COOL" },
  { no: 3, name: "CLIMATE_MODE_HEAT" },
  { no: 4, name: "CLIMATE_MODE_FAN_ONLY" },
  { no: 5, name: "CLIMATE_MODE_DRY" },
  { no: 6, name: "CLIMATE_MODE_AUTO" },
]);

/**
 * @generated from enum ClimateFanMode
 */
export enum ClimateFanMode {
  /**
   * @generated from enum value: CLIMATE_FAN_ON = 0;
   */
  CLIMATE_FAN_ON = 0,

  /**
   * @generated from enum value: CLIMATE_FAN_OFF = 1;
   */
  CLIMATE_FAN_OFF = 1,

  /**
   * @generated from enum value: CLIMATE_FAN_AUTO = 2;
   */
  CLIMATE_FAN_AUTO = 2,

  /**
   * @generated from enum value: CLIMATE_FAN_LOW = 3;
   */
  CLIMATE_FAN_LOW = 3,

  /**
   * @generated from enum value: CLIMATE_FAN_MEDIUM = 4;
   */
  CLIMATE_FAN_MEDIUM = 4,

  /**
   * @generated from enum value: CLIMATE_FAN_HIGH = 5;
   */
  CLIMATE_FAN_HIGH = 5,

  /**
   * @generated from enum value: CLIMATE_FAN_MIDDLE = 6;
   */
  CLIMATE_FAN_MIDDLE = 6,

  /**
   * @generated from enum value: CLIMATE_FAN_FOCUS = 7;
   */
  CLIMATE_FAN_FOCUS = 7,

  /**
   * @generated from enum value: CLIMATE_FAN_DIFFUSE = 8;
   */
  CLIMATE_FAN_DIFFUSE = 8,

  /**
   * @generated from enum value: CLIMATE_FAN_QUIET = 9;
   */
  CLIMATE_FAN_QUIET = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(ClimateFanMode)
proto3.util.setEnumType(ClimateFanMode, "ClimateFanMode", [
  { no: 0, name: "CLIMATE_FAN_ON" },
  { no: 1, name: "CLIMATE_FAN_OFF" },
  { no: 2, name: "CLIMATE_FAN_AUTO" },
  { no: 3, name: "CLIMATE_FAN_LOW" },
  { no: 4, name: "CLIMATE_FAN_MEDIUM" },
  { no: 5, name: "CLIMATE_FAN_HIGH" },
  { no: 6, name: "CLIMATE_FAN_MIDDLE" },
  { no: 7, name: "CLIMATE_FAN_FOCUS" },
  { no: 8, name: "CLIMATE_FAN_DIFFUSE" },
  { no: 9, name: "CLIMATE_FAN_QUIET" },
]);

/**
 * @generated from enum ClimateSwingMode
 */
export enum ClimateSwingMode {
  /**
   * @generated from enum value: CLIMATE_SWING_OFF = 0;
   */
  CLIMATE_SWING_OFF = 0,

  /**
   * @generated from enum value: CLIMATE_SWING_BOTH = 1;
   */
  CLIMATE_SWING_BOTH = 1,

  /**
   * @generated from enum value: CLIMATE_SWING_VERTICAL = 2;
   */
  CLIMATE_SWING_VERTICAL = 2,

  /**
   * @generated from enum value: CLIMATE_SWING_HORIZONTAL = 3;
   */
  CLIMATE_SWING_HORIZONTAL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ClimateSwingMode)
proto3.util.setEnumType(ClimateSwingMode, "ClimateSwingMode", [
  { no: 0, name: "CLIMATE_SWING_OFF" },
  { no: 1, name: "CLIMATE_SWING_BOTH" },
  { no: 2, name: "CLIMATE_SWING_VERTICAL" },
  { no: 3, name: "CLIMATE_SWING_HORIZONTAL" },
]);

/**
 * @generated from enum ClimateAction
 */
export enum ClimateAction {
  /**
   * @generated from enum value: CLIMATE_ACTION_OFF = 0;
   */
  OFF = 0,

  /**
   * values same as mode for readability
   *
   * @generated from enum value: CLIMATE_ACTION_COOLING = 2;
   */
  COOLING = 2,

  /**
   * @generated from enum value: CLIMATE_ACTION_HEATING = 3;
   */
  HEATING = 3,

  /**
   * @generated from enum value: CLIMATE_ACTION_IDLE = 4;
   */
  IDLE = 4,

  /**
   * @generated from enum value: CLIMATE_ACTION_DRYING = 5;
   */
  DRYING = 5,

  /**
   * @generated from enum value: CLIMATE_ACTION_FAN = 6;
   */
  FAN = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(ClimateAction)
proto3.util.setEnumType(ClimateAction, "ClimateAction", [
  { no: 0, name: "CLIMATE_ACTION_OFF" },
  { no: 2, name: "CLIMATE_ACTION_COOLING" },
  { no: 3, name: "CLIMATE_ACTION_HEATING" },
  { no: 4, name: "CLIMATE_ACTION_IDLE" },
  { no: 5, name: "CLIMATE_ACTION_DRYING" },
  { no: 6, name: "CLIMATE_ACTION_FAN" },
]);

/**
 * @generated from enum ClimatePreset
 */
export enum ClimatePreset {
  /**
   * @generated from enum value: CLIMATE_PRESET_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: CLIMATE_PRESET_HOME = 1;
   */
  HOME = 1,

  /**
   * @generated from enum value: CLIMATE_PRESET_AWAY = 2;
   */
  AWAY = 2,

  /**
   * @generated from enum value: CLIMATE_PRESET_BOOST = 3;
   */
  BOOST = 3,

  /**
   * @generated from enum value: CLIMATE_PRESET_COMFORT = 4;
   */
  COMFORT = 4,

  /**
   * @generated from enum value: CLIMATE_PRESET_ECO = 5;
   */
  ECO = 5,

  /**
   * @generated from enum value: CLIMATE_PRESET_SLEEP = 6;
   */
  SLEEP = 6,

  /**
   * @generated from enum value: CLIMATE_PRESET_ACTIVITY = 7;
   */
  ACTIVITY = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ClimatePreset)
proto3.util.setEnumType(ClimatePreset, "ClimatePreset", [
  { no: 0, name: "CLIMATE_PRESET_NONE" },
  { no: 1, name: "CLIMATE_PRESET_HOME" },
  { no: 2, name: "CLIMATE_PRESET_AWAY" },
  { no: 3, name: "CLIMATE_PRESET_BOOST" },
  { no: 4, name: "CLIMATE_PRESET_COMFORT" },
  { no: 5, name: "CLIMATE_PRESET_ECO" },
  { no: 6, name: "CLIMATE_PRESET_SLEEP" },
  { no: 7, name: "CLIMATE_PRESET_ACTIVITY" },
]);

/**
 * ==================== NUMBER ====================
 *
 * @generated from enum NumberMode
 */
export enum NumberMode {
  /**
   * @generated from enum value: NUMBER_MODE_AUTO = 0;
   */
  AUTO = 0,

  /**
   * @generated from enum value: NUMBER_MODE_BOX = 1;
   */
  BOX = 1,

  /**
   * @generated from enum value: NUMBER_MODE_SLIDER = 2;
   */
  SLIDER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NumberMode)
proto3.util.setEnumType(NumberMode, "NumberMode", [
  { no: 0, name: "NUMBER_MODE_AUTO" },
  { no: 1, name: "NUMBER_MODE_BOX" },
  { no: 2, name: "NUMBER_MODE_SLIDER" },
]);

/**
 * ==================== LOCK ====================
 *
 * @generated from enum LockState
 */
export enum LockState {
  /**
   * @generated from enum value: LOCK_STATE_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: LOCK_STATE_LOCKED = 1;
   */
  LOCKED = 1,

  /**
   * @generated from enum value: LOCK_STATE_UNLOCKED = 2;
   */
  UNLOCKED = 2,

  /**
   * @generated from enum value: LOCK_STATE_JAMMED = 3;
   */
  JAMMED = 3,

  /**
   * @generated from enum value: LOCK_STATE_LOCKING = 4;
   */
  LOCKING = 4,

  /**
   * @generated from enum value: LOCK_STATE_UNLOCKING = 5;
   */
  UNLOCKING = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(LockState)
proto3.util.setEnumType(LockState, "LockState", [
  { no: 0, name: "LOCK_STATE_NONE" },
  { no: 1, name: "LOCK_STATE_LOCKED" },
  { no: 2, name: "LOCK_STATE_UNLOCKED" },
  { no: 3, name: "LOCK_STATE_JAMMED" },
  { no: 4, name: "LOCK_STATE_LOCKING" },
  { no: 5, name: "LOCK_STATE_UNLOCKING" },
]);

/**
 * @generated from enum LockCommand
 */
export enum LockCommand {
  /**
   * @generated from enum value: LOCK_UNLOCK = 0;
   */
  LOCK_UNLOCK = 0,

  /**
   * @generated from enum value: LOCK_LOCK = 1;
   */
  LOCK_LOCK = 1,

  /**
   * @generated from enum value: LOCK_OPEN = 2;
   */
  LOCK_OPEN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(LockCommand)
proto3.util.setEnumType(LockCommand, "LockCommand", [
  { no: 0, name: "LOCK_UNLOCK" },
  { no: 1, name: "LOCK_LOCK" },
  { no: 2, name: "LOCK_OPEN" },
]);

/**
 * ==================== MEDIA PLAYER ====================
 *
 * @generated from enum MediaPlayerState
 */
export enum MediaPlayerState {
  /**
   * @generated from enum value: MEDIA_PLAYER_STATE_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: MEDIA_PLAYER_STATE_IDLE = 1;
   */
  IDLE = 1,

  /**
   * @generated from enum value: MEDIA_PLAYER_STATE_PLAYING = 2;
   */
  PLAYING = 2,

  /**
   * @generated from enum value: MEDIA_PLAYER_STATE_PAUSED = 3;
   */
  PAUSED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaPlayerState)
proto3.util.setEnumType(MediaPlayerState, "MediaPlayerState", [
  { no: 0, name: "MEDIA_PLAYER_STATE_NONE" },
  { no: 1, name: "MEDIA_PLAYER_STATE_IDLE" },
  { no: 2, name: "MEDIA_PLAYER_STATE_PLAYING" },
  { no: 3, name: "MEDIA_PLAYER_STATE_PAUSED" },
]);

/**
 * @generated from enum MediaPlayerCommand
 */
export enum MediaPlayerCommand {
  /**
   * @generated from enum value: MEDIA_PLAYER_COMMAND_PLAY = 0;
   */
  PLAY = 0,

  /**
   * @generated from enum value: MEDIA_PLAYER_COMMAND_PAUSE = 1;
   */
  PAUSE = 1,

  /**
   * @generated from enum value: MEDIA_PLAYER_COMMAND_STOP = 2;
   */
  STOP = 2,

  /**
   * @generated from enum value: MEDIA_PLAYER_COMMAND_MUTE = 3;
   */
  MUTE = 3,

  /**
   * @generated from enum value: MEDIA_PLAYER_COMMAND_UNMUTE = 4;
   */
  UNMUTE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaPlayerCommand)
proto3.util.setEnumType(MediaPlayerCommand, "MediaPlayerCommand", [
  { no: 0, name: "MEDIA_PLAYER_COMMAND_PLAY" },
  { no: 1, name: "MEDIA_PLAYER_COMMAND_PAUSE" },
  { no: 2, name: "MEDIA_PLAYER_COMMAND_STOP" },
  { no: 3, name: "MEDIA_PLAYER_COMMAND_MUTE" },
  { no: 4, name: "MEDIA_PLAYER_COMMAND_UNMUTE" },
]);

/**
 * @generated from enum BluetoothDeviceRequestType
 */
export enum BluetoothDeviceRequestType {
  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT = 0;
   */
  CONNECT = 0,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT = 1;
   */
  DISCONNECT = 1,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR = 2;
   */
  PAIR = 2,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR = 3;
   */
  UNPAIR = 3,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE = 4;
   */
  CONNECT_V3_WITH_CACHE = 4,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE = 5;
   */
  CONNECT_V3_WITHOUT_CACHE = 5,

  /**
   * @generated from enum value: BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE = 6;
   */
  CLEAR_CACHE = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(BluetoothDeviceRequestType)
proto3.util.setEnumType(BluetoothDeviceRequestType, "BluetoothDeviceRequestType", [
  { no: 0, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT" },
  { no: 1, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT" },
  { no: 2, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR" },
  { no: 3, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR" },
  { no: 4, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE" },
  { no: 5, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE" },
  { no: 6, name: "BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE" },
]);

/**
 * @generated from enum VoiceAssistantRequestFlag
 */
export enum VoiceAssistantRequestFlag {
  /**
   * @generated from enum value: VOICE_ASSISTANT_REQUEST_NONE = 0;
   */
  VOICE_ASSISTANT_REQUEST_NONE = 0,

  /**
   * @generated from enum value: VOICE_ASSISTANT_REQUEST_USE_VAD = 1;
   */
  VOICE_ASSISTANT_REQUEST_USE_VAD = 1,

  /**
   * @generated from enum value: VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD = 2;
   */
  VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VoiceAssistantRequestFlag)
proto3.util.setEnumType(VoiceAssistantRequestFlag, "VoiceAssistantRequestFlag", [
  { no: 0, name: "VOICE_ASSISTANT_REQUEST_NONE" },
  { no: 1, name: "VOICE_ASSISTANT_REQUEST_USE_VAD" },
  { no: 2, name: "VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD" },
]);

/**
 * @generated from enum VoiceAssistantEvent
 */
export enum VoiceAssistantEvent {
  /**
   * @generated from enum value: VOICE_ASSISTANT_ERROR = 0;
   */
  VOICE_ASSISTANT_ERROR = 0,

  /**
   * @generated from enum value: VOICE_ASSISTANT_RUN_START = 1;
   */
  VOICE_ASSISTANT_RUN_START = 1,

  /**
   * @generated from enum value: VOICE_ASSISTANT_RUN_END = 2;
   */
  VOICE_ASSISTANT_RUN_END = 2,

  /**
   * @generated from enum value: VOICE_ASSISTANT_STT_START = 3;
   */
  VOICE_ASSISTANT_STT_START = 3,

  /**
   * @generated from enum value: VOICE_ASSISTANT_STT_END = 4;
   */
  VOICE_ASSISTANT_STT_END = 4,

  /**
   * @generated from enum value: VOICE_ASSISTANT_INTENT_START = 5;
   */
  VOICE_ASSISTANT_INTENT_START = 5,

  /**
   * @generated from enum value: VOICE_ASSISTANT_INTENT_END = 6;
   */
  VOICE_ASSISTANT_INTENT_END = 6,

  /**
   * @generated from enum value: VOICE_ASSISTANT_TTS_START = 7;
   */
  VOICE_ASSISTANT_TTS_START = 7,

  /**
   * @generated from enum value: VOICE_ASSISTANT_TTS_END = 8;
   */
  VOICE_ASSISTANT_TTS_END = 8,

  /**
   * @generated from enum value: VOICE_ASSISTANT_WAKE_WORD_START = 9;
   */
  VOICE_ASSISTANT_WAKE_WORD_START = 9,

  /**
   * @generated from enum value: VOICE_ASSISTANT_WAKE_WORD_END = 10;
   */
  VOICE_ASSISTANT_WAKE_WORD_END = 10,

  /**
   * @generated from enum value: VOICE_ASSISTANT_STT_VAD_START = 11;
   */
  VOICE_ASSISTANT_STT_VAD_START = 11,

  /**
   * @generated from enum value: VOICE_ASSISTANT_STT_VAD_END = 12;
   */
  VOICE_ASSISTANT_STT_VAD_END = 12,

  /**
   * @generated from enum value: VOICE_ASSISTANT_TTS_STREAM_START = 98;
   */
  VOICE_ASSISTANT_TTS_STREAM_START = 98,

  /**
   * @generated from enum value: VOICE_ASSISTANT_TTS_STREAM_END = 99;
   */
  VOICE_ASSISTANT_TTS_STREAM_END = 99,
}
// Retrieve enum metadata with: proto3.getEnumType(VoiceAssistantEvent)
proto3.util.setEnumType(VoiceAssistantEvent, "VoiceAssistantEvent", [
  { no: 0, name: "VOICE_ASSISTANT_ERROR" },
  { no: 1, name: "VOICE_ASSISTANT_RUN_START" },
  { no: 2, name: "VOICE_ASSISTANT_RUN_END" },
  { no: 3, name: "VOICE_ASSISTANT_STT_START" },
  { no: 4, name: "VOICE_ASSISTANT_STT_END" },
  { no: 5, name: "VOICE_ASSISTANT_INTENT_START" },
  { no: 6, name: "VOICE_ASSISTANT_INTENT_END" },
  { no: 7, name: "VOICE_ASSISTANT_TTS_START" },
  { no: 8, name: "VOICE_ASSISTANT_TTS_END" },
  { no: 9, name: "VOICE_ASSISTANT_WAKE_WORD_START" },
  { no: 10, name: "VOICE_ASSISTANT_WAKE_WORD_END" },
  { no: 11, name: "VOICE_ASSISTANT_STT_VAD_START" },
  { no: 12, name: "VOICE_ASSISTANT_STT_VAD_END" },
  { no: 98, name: "VOICE_ASSISTANT_TTS_STREAM_START" },
  { no: 99, name: "VOICE_ASSISTANT_TTS_STREAM_END" },
]);

/**
 * ==================== ALARM CONTROL PANEL ====================
 *
 * @generated from enum AlarmControlPanelState
 */
export enum AlarmControlPanelState {
  /**
   * @generated from enum value: ALARM_STATE_DISARMED = 0;
   */
  ALARM_STATE_DISARMED = 0,

  /**
   * @generated from enum value: ALARM_STATE_ARMED_HOME = 1;
   */
  ALARM_STATE_ARMED_HOME = 1,

  /**
   * @generated from enum value: ALARM_STATE_ARMED_AWAY = 2;
   */
  ALARM_STATE_ARMED_AWAY = 2,

  /**
   * @generated from enum value: ALARM_STATE_ARMED_NIGHT = 3;
   */
  ALARM_STATE_ARMED_NIGHT = 3,

  /**
   * @generated from enum value: ALARM_STATE_ARMED_VACATION = 4;
   */
  ALARM_STATE_ARMED_VACATION = 4,

  /**
   * @generated from enum value: ALARM_STATE_ARMED_CUSTOM_BYPASS = 5;
   */
  ALARM_STATE_ARMED_CUSTOM_BYPASS = 5,

  /**
   * @generated from enum value: ALARM_STATE_PENDING = 6;
   */
  ALARM_STATE_PENDING = 6,

  /**
   * @generated from enum value: ALARM_STATE_ARMING = 7;
   */
  ALARM_STATE_ARMING = 7,

  /**
   * @generated from enum value: ALARM_STATE_DISARMING = 8;
   */
  ALARM_STATE_DISARMING = 8,

  /**
   * @generated from enum value: ALARM_STATE_TRIGGERED = 9;
   */
  ALARM_STATE_TRIGGERED = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(AlarmControlPanelState)
proto3.util.setEnumType(AlarmControlPanelState, "AlarmControlPanelState", [
  { no: 0, name: "ALARM_STATE_DISARMED" },
  { no: 1, name: "ALARM_STATE_ARMED_HOME" },
  { no: 2, name: "ALARM_STATE_ARMED_AWAY" },
  { no: 3, name: "ALARM_STATE_ARMED_NIGHT" },
  { no: 4, name: "ALARM_STATE_ARMED_VACATION" },
  { no: 5, name: "ALARM_STATE_ARMED_CUSTOM_BYPASS" },
  { no: 6, name: "ALARM_STATE_PENDING" },
  { no: 7, name: "ALARM_STATE_ARMING" },
  { no: 8, name: "ALARM_STATE_DISARMING" },
  { no: 9, name: "ALARM_STATE_TRIGGERED" },
]);

/**
 * @generated from enum AlarmControlPanelStateCommand
 */
export enum AlarmControlPanelStateCommand {
  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_DISARM = 0;
   */
  ALARM_CONTROL_PANEL_DISARM = 0,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_ARM_AWAY = 1;
   */
  ALARM_CONTROL_PANEL_ARM_AWAY = 1,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_ARM_HOME = 2;
   */
  ALARM_CONTROL_PANEL_ARM_HOME = 2,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_ARM_NIGHT = 3;
   */
  ALARM_CONTROL_PANEL_ARM_NIGHT = 3,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_ARM_VACATION = 4;
   */
  ALARM_CONTROL_PANEL_ARM_VACATION = 4,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS = 5;
   */
  ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS = 5,

  /**
   * @generated from enum value: ALARM_CONTROL_PANEL_TRIGGER = 6;
   */
  ALARM_CONTROL_PANEL_TRIGGER = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(AlarmControlPanelStateCommand)
proto3.util.setEnumType(AlarmControlPanelStateCommand, "AlarmControlPanelStateCommand", [
  { no: 0, name: "ALARM_CONTROL_PANEL_DISARM" },
  { no: 1, name: "ALARM_CONTROL_PANEL_ARM_AWAY" },
  { no: 2, name: "ALARM_CONTROL_PANEL_ARM_HOME" },
  { no: 3, name: "ALARM_CONTROL_PANEL_ARM_NIGHT" },
  { no: 4, name: "ALARM_CONTROL_PANEL_ARM_VACATION" },
  { no: 5, name: "ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS" },
  { no: 6, name: "ALARM_CONTROL_PANEL_TRIGGER" },
]);

/**
 * ===================== TEXT =====================
 *
 * @generated from enum TextMode
 */
export enum TextMode {
  /**
   * @generated from enum value: TEXT_MODE_TEXT = 0;
   */
  TEXT = 0,

  /**
   * @generated from enum value: TEXT_MODE_PASSWORD = 1;
   */
  PASSWORD = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TextMode)
proto3.util.setEnumType(TextMode, "TextMode", [
  { no: 0, name: "TEXT_MODE_TEXT" },
  { no: 1, name: "TEXT_MODE_PASSWORD" },
]);

/**
 * Message sent at the beginning of each connection
 * Can only be sent by the client and only at the beginning of the connection
 *
 * @generated from message HelloRequest
 */
export class HelloRequest extends Message<HelloRequest> {
  /**
   * Description of client (like User Agent)
   * For example "Home Assistant"
   * Not strictly necessary to send but nice for debugging
   * purposes.
   *
   * @generated from field: string client_info = 1;
   */
  clientInfo = "";

  /**
   * @generated from field: uint32 api_version_major = 2;
   */
  apiVersionMajor = 0;

  /**
   * @generated from field: uint32 api_version_minor = 3;
   */
  apiVersionMinor = 0;

  constructor(data?: PartialMessage<HelloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "HelloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_version_major", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "api_version_minor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloRequest {
    return new HelloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloRequest | PlainMessage<HelloRequest> | undefined, b: HelloRequest | PlainMessage<HelloRequest> | undefined): boolean {
    return proto3.util.equals(HelloRequest, a, b);
  }
}

/**
 * Confirmation of successful connection request.
 * Can only be sent by the server and only at the beginning of the connection
 *
 * @generated from message HelloResponse
 */
export class HelloResponse extends Message<HelloResponse> {
  /**
   * The version of the API to use. The _client_ (for example Home Assistant) needs to check
   * for compatibility and if necessary adopt to an older API.
   * Major is for breaking changes in the base protocol - a mismatch will lead to immediate disconnect_client_
   * Minor is for breaking changes in individual messages - a mismatch will lead to a warning message
   *
   * @generated from field: uint32 api_version_major = 1;
   */
  apiVersionMajor = 0;

  /**
   * @generated from field: uint32 api_version_minor = 2;
   */
  apiVersionMinor = 0;

  /**
   * A string identifying the server (ESP); like client info this may be empty
   * and only exists for debugging/logging purposes.
   * For example "ESPHome v1.10.0 on ESP8266"
   *
   * @generated from field: string server_info = 3;
   */
  serverInfo = "";

  /**
   * The name of the server (App.get_name())
   *
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<HelloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "HelloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version_major", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "api_version_minor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "server_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloResponse {
    return new HelloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloResponse | PlainMessage<HelloResponse> | undefined, b: HelloResponse | PlainMessage<HelloResponse> | undefined): boolean {
    return proto3.util.equals(HelloResponse, a, b);
  }
}

/**
 * Message sent at the beginning of each connection to authenticate the client
 * Can only be sent by the client and only at the beginning of the connection
 *
 * @generated from message ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * The password to log in with
   *
   * @generated from field: string password = 1;
   */
  password = "";

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * Confirmation of successful connection. After this the connection is available for all traffic.
 * Can only be sent by the server and only at the beginning of the connection
 *
 * @generated from message ConnectResponse
 */
export class ConnectResponse extends Message<ConnectResponse> {
  /**
   * @generated from field: bool invalid_password = 1;
   */
  invalidPassword = false;

  constructor(data?: PartialMessage<ConnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ConnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invalid_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse {
    return new ConnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean {
    return proto3.util.equals(ConnectResponse, a, b);
  }
}

/**
 * Request to close the connection.
 * Can be sent by both the client and server
 *
 * @generated from message DisconnectRequest
 */
export class DisconnectRequest extends Message<DisconnectRequest> {
  constructor(data?: PartialMessage<DisconnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DisconnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined, b: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined): boolean {
    return proto3.util.equals(DisconnectRequest, a, b);
  }
}

/**
 * @generated from message DisconnectResponse
 */
export class DisconnectResponse extends Message<DisconnectResponse> {
  constructor(data?: PartialMessage<DisconnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DisconnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined, b: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined): boolean {
    return proto3.util.equals(DisconnectResponse, a, b);
  }
}

/**
 * @generated from message PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message DeviceInfoRequest
 */
export class DeviceInfoRequest extends Message<DeviceInfoRequest> {
  constructor(data?: PartialMessage<DeviceInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DeviceInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceInfoRequest {
    return new DeviceInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceInfoRequest {
    return new DeviceInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceInfoRequest {
    return new DeviceInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceInfoRequest | PlainMessage<DeviceInfoRequest> | undefined, b: DeviceInfoRequest | PlainMessage<DeviceInfoRequest> | undefined): boolean {
    return proto3.util.equals(DeviceInfoRequest, a, b);
  }
}

/**
 * @generated from message DeviceInfoResponse
 */
export class DeviceInfoResponse extends Message<DeviceInfoResponse> {
  /**
   * @generated from field: bool uses_password = 1;
   */
  usesPassword = false;

  /**
   * The name of the node, given by "App.set_name()"
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The mac address of the device. For example "AC:BC:32:89:0E:A9"
   *
   * @generated from field: string mac_address = 3;
   */
  macAddress = "";

  /**
   * A string describing the ESPHome version. For example "1.10.0"
   *
   * @generated from field: string esphome_version = 4;
   */
  esphomeVersion = "";

  /**
   * A string describing the date of compilation, this is generated by the compiler
   * and therefore may not be in the same format all the time.
   * If the user isn't using ESPHome, this will also not be set.
   *
   * @generated from field: string compilation_time = 5;
   */
  compilationTime = "";

  /**
   * The model of the board. For example NodeMCU
   *
   * @generated from field: string model = 6;
   */
  model = "";

  /**
   * @generated from field: bool has_deep_sleep = 7;
   */
  hasDeepSleep = false;

  /**
   * The esphome project details if set
   *
   * @generated from field: string project_name = 8;
   */
  projectName = "";

  /**
   * @generated from field: string project_version = 9;
   */
  projectVersion = "";

  /**
   * @generated from field: uint32 webserver_port = 10;
   */
  webserverPort = 0;

  /**
   * @generated from field: uint32 legacy_bluetooth_proxy_version = 11;
   */
  legacyBluetoothProxyVersion = 0;

  /**
   * @generated from field: uint32 bluetooth_proxy_feature_flags = 15;
   */
  bluetoothProxyFeatureFlags = 0;

  /**
   * @generated from field: string manufacturer = 12;
   */
  manufacturer = "";

  /**
   * @generated from field: string friendly_name = 13;
   */
  friendlyName = "";

  /**
   * @generated from field: uint32 voice_assistant_version = 14;
   */
  voiceAssistantVersion = 0;

  /**
   * @generated from field: string suggested_area = 16;
   */
  suggestedArea = "";

  constructor(data?: PartialMessage<DeviceInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "DeviceInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uses_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mac_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "esphome_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "compilation_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "has_deep_sleep", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "project_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "webserver_port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "legacy_bluetooth_proxy_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "bluetooth_proxy_feature_flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "manufacturer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "voice_assistant_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "suggested_area", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceInfoResponse {
    return new DeviceInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceInfoResponse {
    return new DeviceInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceInfoResponse {
    return new DeviceInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceInfoResponse | PlainMessage<DeviceInfoResponse> | undefined, b: DeviceInfoResponse | PlainMessage<DeviceInfoResponse> | undefined): boolean {
    return proto3.util.equals(DeviceInfoResponse, a, b);
  }
}

/**
 * @generated from message ListEntitiesRequest
 */
export class ListEntitiesRequest extends Message<ListEntitiesRequest> {
  constructor(data?: PartialMessage<ListEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesRequest {
    return new ListEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesRequest {
    return new ListEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesRequest {
    return new ListEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesRequest | PlainMessage<ListEntitiesRequest> | undefined, b: ListEntitiesRequest | PlainMessage<ListEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(ListEntitiesRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesDoneResponse
 */
export class ListEntitiesDoneResponse extends Message<ListEntitiesDoneResponse> {
  constructor(data?: PartialMessage<ListEntitiesDoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesDoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesDoneResponse {
    return new ListEntitiesDoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesDoneResponse {
    return new ListEntitiesDoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesDoneResponse {
    return new ListEntitiesDoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesDoneResponse | PlainMessage<ListEntitiesDoneResponse> | undefined, b: ListEntitiesDoneResponse | PlainMessage<ListEntitiesDoneResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesDoneResponse, a, b);
  }
}

/**
 * @generated from message SubscribeStatesRequest
 */
export class SubscribeStatesRequest extends Message<SubscribeStatesRequest> {
  constructor(data?: PartialMessage<SubscribeStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeStatesRequest {
    return new SubscribeStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeStatesRequest {
    return new SubscribeStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeStatesRequest {
    return new SubscribeStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeStatesRequest | PlainMessage<SubscribeStatesRequest> | undefined, b: SubscribeStatesRequest | PlainMessage<SubscribeStatesRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeStatesRequest, a, b);
  }
}

/**
 * ==================== BINARY SENSOR ====================
 *
 * @generated from message ListEntitiesBinarySensorResponse
 */
export class ListEntitiesBinarySensorResponse extends Message<ListEntitiesBinarySensorResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string device_class = 5;
   */
  deviceClass = "";

  /**
   * @generated from field: bool is_status_binary_sensor = 6;
   */
  isStatusBinarySensor = false;

  /**
   * @generated from field: bool disabled_by_default = 7;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 8;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 9;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesBinarySensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesBinarySensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_status_binary_sensor", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesBinarySensorResponse {
    return new ListEntitiesBinarySensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesBinarySensorResponse {
    return new ListEntitiesBinarySensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesBinarySensorResponse {
    return new ListEntitiesBinarySensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesBinarySensorResponse | PlainMessage<ListEntitiesBinarySensorResponse> | undefined, b: ListEntitiesBinarySensorResponse | PlainMessage<ListEntitiesBinarySensorResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesBinarySensorResponse, a, b);
  }
}

/**
 * @generated from message BinarySensorStateResponse
 */
export class BinarySensorStateResponse extends Message<BinarySensorStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool state = 2;
   */
  state = false;

  /**
   * If the binary sensor does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<BinarySensorStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BinarySensorStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BinarySensorStateResponse {
    return new BinarySensorStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BinarySensorStateResponse {
    return new BinarySensorStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BinarySensorStateResponse {
    return new BinarySensorStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BinarySensorStateResponse | PlainMessage<BinarySensorStateResponse> | undefined, b: BinarySensorStateResponse | PlainMessage<BinarySensorStateResponse> | undefined): boolean {
    return proto3.util.equals(BinarySensorStateResponse, a, b);
  }
}

/**
 * ==================== COVER ====================
 *
 * @generated from message ListEntitiesCoverResponse
 */
export class ListEntitiesCoverResponse extends Message<ListEntitiesCoverResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: bool assumed_state = 5;
   */
  assumedState = false;

  /**
   * @generated from field: bool supports_position = 6;
   */
  supportsPosition = false;

  /**
   * @generated from field: bool supports_tilt = 7;
   */
  supportsTilt = false;

  /**
   * @generated from field: string device_class = 8;
   */
  deviceClass = "";

  /**
   * @generated from field: bool disabled_by_default = 9;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 10;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 11;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: bool supports_stop = 12;
   */
  supportsStop = false;

  constructor(data?: PartialMessage<ListEntitiesCoverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesCoverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "assumed_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "supports_position", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "supports_tilt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 12, name: "supports_stop", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesCoverResponse {
    return new ListEntitiesCoverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesCoverResponse {
    return new ListEntitiesCoverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesCoverResponse {
    return new ListEntitiesCoverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesCoverResponse | PlainMessage<ListEntitiesCoverResponse> | undefined, b: ListEntitiesCoverResponse | PlainMessage<ListEntitiesCoverResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesCoverResponse, a, b);
  }
}

/**
 * @generated from message CoverStateResponse
 */
export class CoverStateResponse extends Message<CoverStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * legacy: state has been removed in 1.13
   * clients/servers must still send/accept it until the next protocol change
   *
   * @generated from field: LegacyCoverState legacy_state = 2;
   */
  legacyState = LegacyCoverState.OPEN;

  /**
   * @generated from field: float position = 3;
   */
  position = 0;

  /**
   * @generated from field: float tilt = 4;
   */
  tilt = 0;

  /**
   * @generated from field: CoverOperation current_operation = 5;
   */
  currentOperation = CoverOperation.IDLE;

  constructor(data?: PartialMessage<CoverStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CoverStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "legacy_state", kind: "enum", T: proto3.getEnumType(LegacyCoverState) },
    { no: 3, name: "position", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "tilt", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "current_operation", kind: "enum", T: proto3.getEnumType(CoverOperation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverStateResponse {
    return new CoverStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverStateResponse {
    return new CoverStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverStateResponse {
    return new CoverStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CoverStateResponse | PlainMessage<CoverStateResponse> | undefined, b: CoverStateResponse | PlainMessage<CoverStateResponse> | undefined): boolean {
    return proto3.util.equals(CoverStateResponse, a, b);
  }
}

/**
 * @generated from message CoverCommandRequest
 */
export class CoverCommandRequest extends Message<CoverCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * legacy: command has been removed in 1.13
   * clients/servers must still send/accept it until the next protocol change
   *
   * @generated from field: bool has_legacy_command = 2;
   */
  hasLegacyCommand = false;

  /**
   * @generated from field: LegacyCoverCommand legacy_command = 3;
   */
  legacyCommand = LegacyCoverCommand.OPEN;

  /**
   * @generated from field: bool has_position = 4;
   */
  hasPosition = false;

  /**
   * @generated from field: float position = 5;
   */
  position = 0;

  /**
   * @generated from field: bool has_tilt = 6;
   */
  hasTilt = false;

  /**
   * @generated from field: float tilt = 7;
   */
  tilt = 0;

  /**
   * @generated from field: bool stop = 8;
   */
  stop = false;

  constructor(data?: PartialMessage<CoverCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CoverCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "has_legacy_command", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "legacy_command", kind: "enum", T: proto3.getEnumType(LegacyCoverCommand) },
    { no: 4, name: "has_position", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "position", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "has_tilt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "tilt", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "stop", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverCommandRequest {
    return new CoverCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverCommandRequest {
    return new CoverCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverCommandRequest {
    return new CoverCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CoverCommandRequest | PlainMessage<CoverCommandRequest> | undefined, b: CoverCommandRequest | PlainMessage<CoverCommandRequest> | undefined): boolean {
    return proto3.util.equals(CoverCommandRequest, a, b);
  }
}

/**
 * ==================== FAN ====================
 *
 * @generated from message ListEntitiesFanResponse
 */
export class ListEntitiesFanResponse extends Message<ListEntitiesFanResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: bool supports_oscillation = 5;
   */
  supportsOscillation = false;

  /**
   * @generated from field: bool supports_speed = 6;
   */
  supportsSpeed = false;

  /**
   * @generated from field: bool supports_direction = 7;
   */
  supportsDirection = false;

  /**
   * @generated from field: int32 supported_speed_count = 8;
   */
  supportedSpeedCount = 0;

  /**
   * @generated from field: bool disabled_by_default = 9;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 10;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 11;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: repeated string supported_preset_modes = 12;
   */
  supportedPresetModes: string[] = [];

  constructor(data?: PartialMessage<ListEntitiesFanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesFanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "supports_oscillation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "supports_speed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "supports_direction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "supported_speed_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 12, name: "supported_preset_modes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesFanResponse {
    return new ListEntitiesFanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesFanResponse {
    return new ListEntitiesFanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesFanResponse {
    return new ListEntitiesFanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesFanResponse | PlainMessage<ListEntitiesFanResponse> | undefined, b: ListEntitiesFanResponse | PlainMessage<ListEntitiesFanResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesFanResponse, a, b);
  }
}

/**
 * @generated from message FanStateResponse
 */
export class FanStateResponse extends Message<FanStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool state = 2;
   */
  state = false;

  /**
   * @generated from field: bool oscillating = 3;
   */
  oscillating = false;

  /**
   * @generated from field: FanSpeed speed = 4 [deprecated = true];
   * @deprecated
   */
  speed = FanSpeed.LOW;

  /**
   * @generated from field: FanDirection direction = 5;
   */
  direction = FanDirection.FORWARD;

  /**
   * @generated from field: int32 speed_level = 6;
   */
  speedLevel = 0;

  /**
   * @generated from field: string preset_mode = 7;
   */
  presetMode = "";

  constructor(data?: PartialMessage<FanStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FanStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "oscillating", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "speed", kind: "enum", T: proto3.getEnumType(FanSpeed) },
    { no: 5, name: "direction", kind: "enum", T: proto3.getEnumType(FanDirection) },
    { no: 6, name: "speed_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "preset_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FanStateResponse {
    return new FanStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FanStateResponse {
    return new FanStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FanStateResponse {
    return new FanStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FanStateResponse | PlainMessage<FanStateResponse> | undefined, b: FanStateResponse | PlainMessage<FanStateResponse> | undefined): boolean {
    return proto3.util.equals(FanStateResponse, a, b);
  }
}

/**
 * @generated from message FanCommandRequest
 */
export class FanCommandRequest extends Message<FanCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool has_state = 2;
   */
  hasState = false;

  /**
   * @generated from field: bool state = 3;
   */
  state = false;

  /**
   * @generated from field: bool has_speed = 4 [deprecated = true];
   * @deprecated
   */
  hasSpeed = false;

  /**
   * @generated from field: FanSpeed speed = 5 [deprecated = true];
   * @deprecated
   */
  speed = FanSpeed.LOW;

  /**
   * @generated from field: bool has_oscillating = 6;
   */
  hasOscillating = false;

  /**
   * @generated from field: bool oscillating = 7;
   */
  oscillating = false;

  /**
   * @generated from field: bool has_direction = 8;
   */
  hasDirection = false;

  /**
   * @generated from field: FanDirection direction = 9;
   */
  direction = FanDirection.FORWARD;

  /**
   * @generated from field: bool has_speed_level = 10;
   */
  hasSpeedLevel = false;

  /**
   * @generated from field: int32 speed_level = 11;
   */
  speedLevel = 0;

  /**
   * @generated from field: bool has_preset_mode = 12;
   */
  hasPresetMode = false;

  /**
   * @generated from field: string preset_mode = 13;
   */
  presetMode = "";

  constructor(data?: PartialMessage<FanCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FanCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "has_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_speed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "speed", kind: "enum", T: proto3.getEnumType(FanSpeed) },
    { no: 6, name: "has_oscillating", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "oscillating", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "has_direction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "direction", kind: "enum", T: proto3.getEnumType(FanDirection) },
    { no: 10, name: "has_speed_level", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "speed_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "has_preset_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "preset_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FanCommandRequest {
    return new FanCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FanCommandRequest {
    return new FanCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FanCommandRequest {
    return new FanCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FanCommandRequest | PlainMessage<FanCommandRequest> | undefined, b: FanCommandRequest | PlainMessage<FanCommandRequest> | undefined): boolean {
    return proto3.util.equals(FanCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesLightResponse
 */
export class ListEntitiesLightResponse extends Message<ListEntitiesLightResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: repeated ColorMode supported_color_modes = 12;
   */
  supportedColorModes: ColorMode[] = [];

  /**
   * next four supports_* are for legacy clients, newer clients should use color modes
   *
   * @generated from field: bool legacy_supports_brightness = 5 [deprecated = true];
   * @deprecated
   */
  legacySupportsBrightness = false;

  /**
   * @generated from field: bool legacy_supports_rgb = 6 [deprecated = true];
   * @deprecated
   */
  legacySupportsRgb = false;

  /**
   * @generated from field: bool legacy_supports_white_value = 7 [deprecated = true];
   * @deprecated
   */
  legacySupportsWhiteValue = false;

  /**
   * @generated from field: bool legacy_supports_color_temperature = 8 [deprecated = true];
   * @deprecated
   */
  legacySupportsColorTemperature = false;

  /**
   * @generated from field: float min_mireds = 9;
   */
  minMireds = 0;

  /**
   * @generated from field: float max_mireds = 10;
   */
  maxMireds = 0;

  /**
   * @generated from field: repeated string effects = 11;
   */
  effects: string[] = [];

  /**
   * @generated from field: bool disabled_by_default = 13;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 14;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 15;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesLightResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesLightResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "supported_color_modes", kind: "enum", T: proto3.getEnumType(ColorMode), repeated: true },
    { no: 5, name: "legacy_supports_brightness", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "legacy_supports_rgb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "legacy_supports_white_value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "legacy_supports_color_temperature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "min_mireds", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "max_mireds", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "effects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesLightResponse {
    return new ListEntitiesLightResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesLightResponse {
    return new ListEntitiesLightResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesLightResponse {
    return new ListEntitiesLightResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesLightResponse | PlainMessage<ListEntitiesLightResponse> | undefined, b: ListEntitiesLightResponse | PlainMessage<ListEntitiesLightResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesLightResponse, a, b);
  }
}

/**
 * @generated from message LightStateResponse
 */
export class LightStateResponse extends Message<LightStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool state = 2;
   */
  state = false;

  /**
   * @generated from field: float brightness = 3;
   */
  brightness = 0;

  /**
   * @generated from field: ColorMode color_mode = 11;
   */
  colorMode = ColorMode.UNKNOWN;

  /**
   * @generated from field: float color_brightness = 10;
   */
  colorBrightness = 0;

  /**
   * @generated from field: float red = 4;
   */
  red = 0;

  /**
   * @generated from field: float green = 5;
   */
  green = 0;

  /**
   * @generated from field: float blue = 6;
   */
  blue = 0;

  /**
   * @generated from field: float white = 7;
   */
  white = 0;

  /**
   * @generated from field: float color_temperature = 8;
   */
  colorTemperature = 0;

  /**
   * @generated from field: float cold_white = 12;
   */
  coldWhite = 0;

  /**
   * @generated from field: float warm_white = 13;
   */
  warmWhite = 0;

  /**
   * @generated from field: string effect = 9;
   */
  effect = "";

  constructor(data?: PartialMessage<LightStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LightStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "brightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "color_mode", kind: "enum", T: proto3.getEnumType(ColorMode) },
    { no: 10, name: "color_brightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "red", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "green", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "blue", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "color_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "cold_white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "warm_white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "effect", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LightStateResponse {
    return new LightStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LightStateResponse {
    return new LightStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LightStateResponse {
    return new LightStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LightStateResponse | PlainMessage<LightStateResponse> | undefined, b: LightStateResponse | PlainMessage<LightStateResponse> | undefined): boolean {
    return proto3.util.equals(LightStateResponse, a, b);
  }
}

/**
 * @generated from message LightCommandRequest
 */
export class LightCommandRequest extends Message<LightCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool has_state = 2;
   */
  hasState = false;

  /**
   * @generated from field: bool state = 3;
   */
  state = false;

  /**
   * @generated from field: bool has_brightness = 4;
   */
  hasBrightness = false;

  /**
   * @generated from field: float brightness = 5;
   */
  brightness = 0;

  /**
   * @generated from field: bool has_color_mode = 22;
   */
  hasColorMode = false;

  /**
   * @generated from field: ColorMode color_mode = 23;
   */
  colorMode = ColorMode.UNKNOWN;

  /**
   * @generated from field: bool has_color_brightness = 20;
   */
  hasColorBrightness = false;

  /**
   * @generated from field: float color_brightness = 21;
   */
  colorBrightness = 0;

  /**
   * @generated from field: bool has_rgb = 6;
   */
  hasRgb = false;

  /**
   * @generated from field: float red = 7;
   */
  red = 0;

  /**
   * @generated from field: float green = 8;
   */
  green = 0;

  /**
   * @generated from field: float blue = 9;
   */
  blue = 0;

  /**
   * @generated from field: bool has_white = 10;
   */
  hasWhite = false;

  /**
   * @generated from field: float white = 11;
   */
  white = 0;

  /**
   * @generated from field: bool has_color_temperature = 12;
   */
  hasColorTemperature = false;

  /**
   * @generated from field: float color_temperature = 13;
   */
  colorTemperature = 0;

  /**
   * @generated from field: bool has_cold_white = 24;
   */
  hasColdWhite = false;

  /**
   * @generated from field: float cold_white = 25;
   */
  coldWhite = 0;

  /**
   * @generated from field: bool has_warm_white = 26;
   */
  hasWarmWhite = false;

  /**
   * @generated from field: float warm_white = 27;
   */
  warmWhite = 0;

  /**
   * @generated from field: bool has_transition_length = 14;
   */
  hasTransitionLength = false;

  /**
   * @generated from field: uint32 transition_length = 15;
   */
  transitionLength = 0;

  /**
   * @generated from field: bool has_flash_length = 16;
   */
  hasFlashLength = false;

  /**
   * @generated from field: uint32 flash_length = 17;
   */
  flashLength = 0;

  /**
   * @generated from field: bool has_effect = 18;
   */
  hasEffect = false;

  /**
   * @generated from field: string effect = 19;
   */
  effect = "";

  constructor(data?: PartialMessage<LightCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LightCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "has_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_brightness", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "brightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 22, name: "has_color_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "color_mode", kind: "enum", T: proto3.getEnumType(ColorMode) },
    { no: 20, name: "has_color_brightness", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "color_brightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "has_rgb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "red", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "green", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "blue", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "has_white", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 12, name: "has_color_temperature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "color_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 24, name: "has_cold_white", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "cold_white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 26, name: "has_warm_white", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "warm_white", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 14, name: "has_transition_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "transition_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "has_flash_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "flash_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "has_effect", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "effect", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LightCommandRequest {
    return new LightCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LightCommandRequest {
    return new LightCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LightCommandRequest {
    return new LightCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LightCommandRequest | PlainMessage<LightCommandRequest> | undefined, b: LightCommandRequest | PlainMessage<LightCommandRequest> | undefined): boolean {
    return proto3.util.equals(LightCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesSensorResponse
 */
export class ListEntitiesSensorResponse extends Message<ListEntitiesSensorResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: string unit_of_measurement = 6;
   */
  unitOfMeasurement = "";

  /**
   * @generated from field: int32 accuracy_decimals = 7;
   */
  accuracyDecimals = 0;

  /**
   * @generated from field: bool force_update = 8;
   */
  forceUpdate = false;

  /**
   * @generated from field: string device_class = 9;
   */
  deviceClass = "";

  /**
   * @generated from field: SensorStateClass state_class = 10;
   */
  stateClass = SensorStateClass.STATE_CLASS_NONE;

  /**
   * Last reset type removed in 2021.9.0
   *
   * @generated from field: SensorLastResetType legacy_last_reset_type = 11;
   */
  legacyLastResetType = SensorLastResetType.LAST_RESET_NONE;

  /**
   * @generated from field: bool disabled_by_default = 12;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 13;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "unit_of_measurement", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "accuracy_decimals", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "force_update", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "state_class", kind: "enum", T: proto3.getEnumType(SensorStateClass) },
    { no: 11, name: "legacy_last_reset_type", kind: "enum", T: proto3.getEnumType(SensorLastResetType) },
    { no: 12, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesSensorResponse {
    return new ListEntitiesSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesSensorResponse {
    return new ListEntitiesSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesSensorResponse {
    return new ListEntitiesSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesSensorResponse | PlainMessage<ListEntitiesSensorResponse> | undefined, b: ListEntitiesSensorResponse | PlainMessage<ListEntitiesSensorResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesSensorResponse, a, b);
  }
}

/**
 * @generated from message SensorStateResponse
 */
export class SensorStateResponse extends Message<SensorStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: float state = 2;
   */
  state = 0;

  /**
   * If the sensor does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<SensorStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SensorStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SensorStateResponse {
    return new SensorStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SensorStateResponse {
    return new SensorStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SensorStateResponse {
    return new SensorStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SensorStateResponse | PlainMessage<SensorStateResponse> | undefined, b: SensorStateResponse | PlainMessage<SensorStateResponse> | undefined): boolean {
    return proto3.util.equals(SensorStateResponse, a, b);
  }
}

/**
 * ==================== SWITCH ====================
 *
 * @generated from message ListEntitiesSwitchResponse
 */
export class ListEntitiesSwitchResponse extends Message<ListEntitiesSwitchResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool assumed_state = 6;
   */
  assumedState = false;

  /**
   * @generated from field: bool disabled_by_default = 7;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 8;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: string device_class = 9;
   */
  deviceClass = "";

  constructor(data?: PartialMessage<ListEntitiesSwitchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesSwitchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "assumed_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 9, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesSwitchResponse {
    return new ListEntitiesSwitchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesSwitchResponse {
    return new ListEntitiesSwitchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesSwitchResponse {
    return new ListEntitiesSwitchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesSwitchResponse | PlainMessage<ListEntitiesSwitchResponse> | undefined, b: ListEntitiesSwitchResponse | PlainMessage<ListEntitiesSwitchResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesSwitchResponse, a, b);
  }
}

/**
 * @generated from message SwitchStateResponse
 */
export class SwitchStateResponse extends Message<SwitchStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool state = 2;
   */
  state = false;

  constructor(data?: PartialMessage<SwitchStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SwitchStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwitchStateResponse {
    return new SwitchStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwitchStateResponse {
    return new SwitchStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwitchStateResponse {
    return new SwitchStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SwitchStateResponse | PlainMessage<SwitchStateResponse> | undefined, b: SwitchStateResponse | PlainMessage<SwitchStateResponse> | undefined): boolean {
    return proto3.util.equals(SwitchStateResponse, a, b);
  }
}

/**
 * @generated from message SwitchCommandRequest
 */
export class SwitchCommandRequest extends Message<SwitchCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool state = 2;
   */
  state = false;

  constructor(data?: PartialMessage<SwitchCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SwitchCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwitchCommandRequest {
    return new SwitchCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwitchCommandRequest {
    return new SwitchCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwitchCommandRequest {
    return new SwitchCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SwitchCommandRequest | PlainMessage<SwitchCommandRequest> | undefined, b: SwitchCommandRequest | PlainMessage<SwitchCommandRequest> | undefined): boolean {
    return proto3.util.equals(SwitchCommandRequest, a, b);
  }
}

/**
 * ==================== TEXT SENSOR ====================
 *
 * @generated from message ListEntitiesTextSensorResponse
 */
export class ListEntitiesTextSensorResponse extends Message<ListEntitiesTextSensorResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesTextSensorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesTextSensorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesTextSensorResponse {
    return new ListEntitiesTextSensorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesTextSensorResponse {
    return new ListEntitiesTextSensorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesTextSensorResponse {
    return new ListEntitiesTextSensorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesTextSensorResponse | PlainMessage<ListEntitiesTextSensorResponse> | undefined, b: ListEntitiesTextSensorResponse | PlainMessage<ListEntitiesTextSensorResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesTextSensorResponse, a, b);
  }
}

/**
 * @generated from message TextSensorStateResponse
 */
export class TextSensorStateResponse extends Message<TextSensorStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * If the text sensor does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<TextSensorStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TextSensorStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextSensorStateResponse {
    return new TextSensorStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextSensorStateResponse {
    return new TextSensorStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextSensorStateResponse {
    return new TextSensorStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TextSensorStateResponse | PlainMessage<TextSensorStateResponse> | undefined, b: TextSensorStateResponse | PlainMessage<TextSensorStateResponse> | undefined): boolean {
    return proto3.util.equals(TextSensorStateResponse, a, b);
  }
}

/**
 * @generated from message SubscribeLogsRequest
 */
export class SubscribeLogsRequest extends Message<SubscribeLogsRequest> {
  /**
   * @generated from field: LogLevel level = 1;
   */
  level = LogLevel.NONE;

  /**
   * @generated from field: bool dump_config = 2;
   */
  dumpConfig = false;

  constructor(data?: PartialMessage<SubscribeLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 2, name: "dump_config", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeLogsRequest {
    return new SubscribeLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeLogsRequest {
    return new SubscribeLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeLogsRequest {
    return new SubscribeLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeLogsRequest | PlainMessage<SubscribeLogsRequest> | undefined, b: SubscribeLogsRequest | PlainMessage<SubscribeLogsRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeLogsRequest, a, b);
  }
}

/**
 * @generated from message SubscribeLogsResponse
 */
export class SubscribeLogsResponse extends Message<SubscribeLogsResponse> {
  /**
   * @generated from field: LogLevel level = 1;
   */
  level = LogLevel.NONE;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: bool send_failed = 4;
   */
  sendFailed = false;

  constructor(data?: PartialMessage<SubscribeLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "send_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeLogsResponse {
    return new SubscribeLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeLogsResponse {
    return new SubscribeLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeLogsResponse {
    return new SubscribeLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeLogsResponse | PlainMessage<SubscribeLogsResponse> | undefined, b: SubscribeLogsResponse | PlainMessage<SubscribeLogsResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeLogsResponse, a, b);
  }
}

/**
 * ==================== HOMEASSISTANT.SERVICE ====================
 *
 * @generated from message SubscribeHomeassistantServicesRequest
 */
export class SubscribeHomeassistantServicesRequest extends Message<SubscribeHomeassistantServicesRequest> {
  constructor(data?: PartialMessage<SubscribeHomeassistantServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeHomeassistantServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeHomeassistantServicesRequest {
    return new SubscribeHomeassistantServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeHomeassistantServicesRequest {
    return new SubscribeHomeassistantServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeHomeassistantServicesRequest {
    return new SubscribeHomeassistantServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeHomeassistantServicesRequest | PlainMessage<SubscribeHomeassistantServicesRequest> | undefined, b: SubscribeHomeassistantServicesRequest | PlainMessage<SubscribeHomeassistantServicesRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeHomeassistantServicesRequest, a, b);
  }
}

/**
 * @generated from message HomeassistantServiceMap
 */
export class HomeassistantServiceMap extends Message<HomeassistantServiceMap> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<HomeassistantServiceMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "HomeassistantServiceMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HomeassistantServiceMap {
    return new HomeassistantServiceMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HomeassistantServiceMap {
    return new HomeassistantServiceMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HomeassistantServiceMap {
    return new HomeassistantServiceMap().fromJsonString(jsonString, options);
  }

  static equals(a: HomeassistantServiceMap | PlainMessage<HomeassistantServiceMap> | undefined, b: HomeassistantServiceMap | PlainMessage<HomeassistantServiceMap> | undefined): boolean {
    return proto3.util.equals(HomeassistantServiceMap, a, b);
  }
}

/**
 * @generated from message HomeassistantServiceResponse
 */
export class HomeassistantServiceResponse extends Message<HomeassistantServiceResponse> {
  /**
   * @generated from field: string service = 1;
   */
  service = "";

  /**
   * @generated from field: repeated HomeassistantServiceMap data = 2;
   */
  data: HomeassistantServiceMap[] = [];

  /**
   * @generated from field: repeated HomeassistantServiceMap data_template = 3;
   */
  dataTemplate: HomeassistantServiceMap[] = [];

  /**
   * @generated from field: repeated HomeassistantServiceMap variables = 4;
   */
  variables: HomeassistantServiceMap[] = [];

  /**
   * @generated from field: bool is_event = 5;
   */
  isEvent = false;

  constructor(data?: PartialMessage<HomeassistantServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "HomeassistantServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: HomeassistantServiceMap, repeated: true },
    { no: 3, name: "data_template", kind: "message", T: HomeassistantServiceMap, repeated: true },
    { no: 4, name: "variables", kind: "message", T: HomeassistantServiceMap, repeated: true },
    { no: 5, name: "is_event", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HomeassistantServiceResponse {
    return new HomeassistantServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HomeassistantServiceResponse {
    return new HomeassistantServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HomeassistantServiceResponse {
    return new HomeassistantServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HomeassistantServiceResponse | PlainMessage<HomeassistantServiceResponse> | undefined, b: HomeassistantServiceResponse | PlainMessage<HomeassistantServiceResponse> | undefined): boolean {
    return proto3.util.equals(HomeassistantServiceResponse, a, b);
  }
}

/**
 * ==================== IMPORT HOME ASSISTANT STATES ====================
 * 1. Client sends SubscribeHomeAssistantStatesRequest
 * 2. Server responds with zero or more SubscribeHomeAssistantStateResponse (async)
 * 3. Client sends HomeAssistantStateResponse for state changes.
 *
 * @generated from message SubscribeHomeAssistantStatesRequest
 */
export class SubscribeHomeAssistantStatesRequest extends Message<SubscribeHomeAssistantStatesRequest> {
  constructor(data?: PartialMessage<SubscribeHomeAssistantStatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeHomeAssistantStatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeHomeAssistantStatesRequest {
    return new SubscribeHomeAssistantStatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeHomeAssistantStatesRequest {
    return new SubscribeHomeAssistantStatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeHomeAssistantStatesRequest {
    return new SubscribeHomeAssistantStatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeHomeAssistantStatesRequest | PlainMessage<SubscribeHomeAssistantStatesRequest> | undefined, b: SubscribeHomeAssistantStatesRequest | PlainMessage<SubscribeHomeAssistantStatesRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeHomeAssistantStatesRequest, a, b);
  }
}

/**
 * @generated from message SubscribeHomeAssistantStateResponse
 */
export class SubscribeHomeAssistantStateResponse extends Message<SubscribeHomeAssistantStateResponse> {
  /**
   * @generated from field: string entity_id = 1;
   */
  entityId = "";

  /**
   * @generated from field: string attribute = 2;
   */
  attribute = "";

  constructor(data?: PartialMessage<SubscribeHomeAssistantStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeHomeAssistantStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeHomeAssistantStateResponse {
    return new SubscribeHomeAssistantStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeHomeAssistantStateResponse {
    return new SubscribeHomeAssistantStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeHomeAssistantStateResponse {
    return new SubscribeHomeAssistantStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeHomeAssistantStateResponse | PlainMessage<SubscribeHomeAssistantStateResponse> | undefined, b: SubscribeHomeAssistantStateResponse | PlainMessage<SubscribeHomeAssistantStateResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeHomeAssistantStateResponse, a, b);
  }
}

/**
 * @generated from message HomeAssistantStateResponse
 */
export class HomeAssistantStateResponse extends Message<HomeAssistantStateResponse> {
  /**
   * @generated from field: string entity_id = 1;
   */
  entityId = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * @generated from field: string attribute = 3;
   */
  attribute = "";

  constructor(data?: PartialMessage<HomeAssistantStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "HomeAssistantStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HomeAssistantStateResponse {
    return new HomeAssistantStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HomeAssistantStateResponse {
    return new HomeAssistantStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HomeAssistantStateResponse {
    return new HomeAssistantStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HomeAssistantStateResponse | PlainMessage<HomeAssistantStateResponse> | undefined, b: HomeAssistantStateResponse | PlainMessage<HomeAssistantStateResponse> | undefined): boolean {
    return proto3.util.equals(HomeAssistantStateResponse, a, b);
  }
}

/**
 * ==================== IMPORT TIME ====================
 *
 * @generated from message GetTimeRequest
 */
export class GetTimeRequest extends Message<GetTimeRequest> {
  constructor(data?: PartialMessage<GetTimeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetTimeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimeRequest {
    return new GetTimeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimeRequest {
    return new GetTimeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimeRequest {
    return new GetTimeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimeRequest | PlainMessage<GetTimeRequest> | undefined, b: GetTimeRequest | PlainMessage<GetTimeRequest> | undefined): boolean {
    return proto3.util.equals(GetTimeRequest, a, b);
  }
}

/**
 * @generated from message GetTimeResponse
 */
export class GetTimeResponse extends Message<GetTimeResponse> {
  /**
   * @generated from field: fixed32 epoch_seconds = 1;
   */
  epochSeconds = 0;

  constructor(data?: PartialMessage<GetTimeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetTimeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_seconds", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimeResponse {
    return new GetTimeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimeResponse {
    return new GetTimeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimeResponse {
    return new GetTimeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimeResponse | PlainMessage<GetTimeResponse> | undefined, b: GetTimeResponse | PlainMessage<GetTimeResponse> | undefined): boolean {
    return proto3.util.equals(GetTimeResponse, a, b);
  }
}

/**
 * @generated from message ListEntitiesServicesArgument
 */
export class ListEntitiesServicesArgument extends Message<ListEntitiesServicesArgument> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: ServiceArgType type = 2;
   */
  type = ServiceArgType.BOOL;

  constructor(data?: PartialMessage<ListEntitiesServicesArgument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesServicesArgument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ServiceArgType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesServicesArgument {
    return new ListEntitiesServicesArgument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesServicesArgument {
    return new ListEntitiesServicesArgument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesServicesArgument {
    return new ListEntitiesServicesArgument().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesServicesArgument | PlainMessage<ListEntitiesServicesArgument> | undefined, b: ListEntitiesServicesArgument | PlainMessage<ListEntitiesServicesArgument> | undefined): boolean {
    return proto3.util.equals(ListEntitiesServicesArgument, a, b);
  }
}

/**
 * @generated from message ListEntitiesServicesResponse
 */
export class ListEntitiesServicesResponse extends Message<ListEntitiesServicesResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: repeated ListEntitiesServicesArgument args = 3;
   */
  args: ListEntitiesServicesArgument[] = [];

  constructor(data?: PartialMessage<ListEntitiesServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "args", kind: "message", T: ListEntitiesServicesArgument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesServicesResponse {
    return new ListEntitiesServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesServicesResponse {
    return new ListEntitiesServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesServicesResponse {
    return new ListEntitiesServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesServicesResponse | PlainMessage<ListEntitiesServicesResponse> | undefined, b: ListEntitiesServicesResponse | PlainMessage<ListEntitiesServicesResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesServicesResponse, a, b);
  }
}

/**
 * @generated from message ExecuteServiceArgument
 */
export class ExecuteServiceArgument extends Message<ExecuteServiceArgument> {
  /**
   * @generated from field: bool bool_ = 1;
   */
  bool = false;

  /**
   * @generated from field: int32 legacy_int = 2;
   */
  legacyInt = 0;

  /**
   * @generated from field: float float_ = 3;
   */
  float = 0;

  /**
   * @generated from field: string string_ = 4;
   */
  string = "";

  /**
   * ESPHome 1.14 (api v1.3) make int a signed value
   *
   * @generated from field: sint32 int_ = 5;
   */
  int = 0;

  /**
   * @generated from field: repeated bool bool_array = 6 [packed = false];
   */
  boolArray: boolean[] = [];

  /**
   * @generated from field: repeated sint32 int_array = 7 [packed = false];
   */
  intArray: number[] = [];

  /**
   * @generated from field: repeated float float_array = 8 [packed = false];
   */
  floatArray: number[] = [];

  /**
   * @generated from field: repeated string string_array = 9;
   */
  stringArray: string[] = [];

  constructor(data?: PartialMessage<ExecuteServiceArgument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ExecuteServiceArgument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bool_", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "legacy_int", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "float_", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "string_", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "int_", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 6, name: "bool_array", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true, packed: false },
    { no: 7, name: "int_array", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true, packed: false },
    { no: 8, name: "float_array", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true, packed: false },
    { no: 9, name: "string_array", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteServiceArgument {
    return new ExecuteServiceArgument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteServiceArgument {
    return new ExecuteServiceArgument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteServiceArgument {
    return new ExecuteServiceArgument().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteServiceArgument | PlainMessage<ExecuteServiceArgument> | undefined, b: ExecuteServiceArgument | PlainMessage<ExecuteServiceArgument> | undefined): boolean {
    return proto3.util.equals(ExecuteServiceArgument, a, b);
  }
}

/**
 * @generated from message ExecuteServiceRequest
 */
export class ExecuteServiceRequest extends Message<ExecuteServiceRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: repeated ExecuteServiceArgument args = 2;
   */
  args: ExecuteServiceArgument[] = [];

  constructor(data?: PartialMessage<ExecuteServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ExecuteServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "args", kind: "message", T: ExecuteServiceArgument, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteServiceRequest {
    return new ExecuteServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteServiceRequest {
    return new ExecuteServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteServiceRequest {
    return new ExecuteServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteServiceRequest | PlainMessage<ExecuteServiceRequest> | undefined, b: ExecuteServiceRequest | PlainMessage<ExecuteServiceRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteServiceRequest, a, b);
  }
}

/**
 * ==================== CAMERA ====================
 *
 * @generated from message ListEntitiesCameraResponse
 */
export class ListEntitiesCameraResponse extends Message<ListEntitiesCameraResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: bool disabled_by_default = 5;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 6;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesCameraResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesCameraResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesCameraResponse {
    return new ListEntitiesCameraResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesCameraResponse {
    return new ListEntitiesCameraResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesCameraResponse {
    return new ListEntitiesCameraResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesCameraResponse | PlainMessage<ListEntitiesCameraResponse> | undefined, b: ListEntitiesCameraResponse | PlainMessage<ListEntitiesCameraResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesCameraResponse, a, b);
  }
}

/**
 * @generated from message CameraImageResponse
 */
export class CameraImageResponse extends Message<CameraImageResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: bool done = 3;
   */
  done = false;

  constructor(data?: PartialMessage<CameraImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CameraImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "done", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CameraImageResponse {
    return new CameraImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CameraImageResponse {
    return new CameraImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CameraImageResponse {
    return new CameraImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CameraImageResponse | PlainMessage<CameraImageResponse> | undefined, b: CameraImageResponse | PlainMessage<CameraImageResponse> | undefined): boolean {
    return proto3.util.equals(CameraImageResponse, a, b);
  }
}

/**
 * @generated from message CameraImageRequest
 */
export class CameraImageRequest extends Message<CameraImageRequest> {
  /**
   * @generated from field: bool single = 1;
   */
  single = false;

  /**
   * @generated from field: bool stream = 2;
   */
  stream = false;

  constructor(data?: PartialMessage<CameraImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CameraImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "single", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CameraImageRequest {
    return new CameraImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CameraImageRequest {
    return new CameraImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CameraImageRequest {
    return new CameraImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CameraImageRequest | PlainMessage<CameraImageRequest> | undefined, b: CameraImageRequest | PlainMessage<CameraImageRequest> | undefined): boolean {
    return proto3.util.equals(CameraImageRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesClimateResponse
 */
export class ListEntitiesClimateResponse extends Message<ListEntitiesClimateResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: bool supports_current_temperature = 5;
   */
  supportsCurrentTemperature = false;

  /**
   * @generated from field: bool supports_two_point_target_temperature = 6;
   */
  supportsTwoPointTargetTemperature = false;

  /**
   * @generated from field: repeated ClimateMode supported_modes = 7;
   */
  supportedModes: ClimateMode[] = [];

  /**
   * @generated from field: float visual_min_temperature = 8;
   */
  visualMinTemperature = 0;

  /**
   * @generated from field: float visual_max_temperature = 9;
   */
  visualMaxTemperature = 0;

  /**
   * @generated from field: float visual_target_temperature_step = 10;
   */
  visualTargetTemperatureStep = 0;

  /**
   * for older peer versions - in new system this
   * is if CLIMATE_PRESET_AWAY exists is supported_presets
   *
   * @generated from field: bool legacy_supports_away = 11;
   */
  legacySupportsAway = false;

  /**
   * @generated from field: bool supports_action = 12;
   */
  supportsAction = false;

  /**
   * @generated from field: repeated ClimateFanMode supported_fan_modes = 13;
   */
  supportedFanModes: ClimateFanMode[] = [];

  /**
   * @generated from field: repeated ClimateSwingMode supported_swing_modes = 14;
   */
  supportedSwingModes: ClimateSwingMode[] = [];

  /**
   * @generated from field: repeated string supported_custom_fan_modes = 15;
   */
  supportedCustomFanModes: string[] = [];

  /**
   * @generated from field: repeated ClimatePreset supported_presets = 16;
   */
  supportedPresets: ClimatePreset[] = [];

  /**
   * @generated from field: repeated string supported_custom_presets = 17;
   */
  supportedCustomPresets: string[] = [];

  /**
   * @generated from field: bool disabled_by_default = 18;
   */
  disabledByDefault = false;

  /**
   * @generated from field: string icon = 19;
   */
  icon = "";

  /**
   * @generated from field: EntityCategory entity_category = 20;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: float visual_current_temperature_step = 21;
   */
  visualCurrentTemperatureStep = 0;

  /**
   * @generated from field: bool supports_current_humidity = 22;
   */
  supportsCurrentHumidity = false;

  /**
   * @generated from field: bool supports_target_humidity = 23;
   */
  supportsTargetHumidity = false;

  /**
   * @generated from field: float visual_min_humidity = 24;
   */
  visualMinHumidity = 0;

  /**
   * @generated from field: float visual_max_humidity = 25;
   */
  visualMaxHumidity = 0;

  constructor(data?: PartialMessage<ListEntitiesClimateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesClimateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "supports_current_temperature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "supports_two_point_target_temperature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "supported_modes", kind: "enum", T: proto3.getEnumType(ClimateMode), repeated: true },
    { no: 8, name: "visual_min_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "visual_max_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "visual_target_temperature_step", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 11, name: "legacy_supports_away", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "supports_action", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "supported_fan_modes", kind: "enum", T: proto3.getEnumType(ClimateFanMode), repeated: true },
    { no: 14, name: "supported_swing_modes", kind: "enum", T: proto3.getEnumType(ClimateSwingMode), repeated: true },
    { no: 15, name: "supported_custom_fan_modes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "supported_presets", kind: "enum", T: proto3.getEnumType(ClimatePreset), repeated: true },
    { no: 17, name: "supported_custom_presets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 21, name: "visual_current_temperature_step", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 22, name: "supports_current_humidity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "supports_target_humidity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 24, name: "visual_min_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 25, name: "visual_max_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesClimateResponse {
    return new ListEntitiesClimateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesClimateResponse {
    return new ListEntitiesClimateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesClimateResponse {
    return new ListEntitiesClimateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesClimateResponse | PlainMessage<ListEntitiesClimateResponse> | undefined, b: ListEntitiesClimateResponse | PlainMessage<ListEntitiesClimateResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesClimateResponse, a, b);
  }
}

/**
 * @generated from message ClimateStateResponse
 */
export class ClimateStateResponse extends Message<ClimateStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: ClimateMode mode = 2;
   */
  mode = ClimateMode.OFF;

  /**
   * @generated from field: float current_temperature = 3;
   */
  currentTemperature = 0;

  /**
   * @generated from field: float target_temperature = 4;
   */
  targetTemperature = 0;

  /**
   * @generated from field: float target_temperature_low = 5;
   */
  targetTemperatureLow = 0;

  /**
   * @generated from field: float target_temperature_high = 6;
   */
  targetTemperatureHigh = 0;

  /**
   * @generated from field: bool unused_legacy_away = 7;
   */
  unusedLegacyAway = false;

  /**
   * @generated from field: ClimateAction action = 8;
   */
  action = ClimateAction.OFF;

  /**
   * @generated from field: ClimateFanMode fan_mode = 9;
   */
  fanMode = ClimateFanMode.CLIMATE_FAN_ON;

  /**
   * @generated from field: ClimateSwingMode swing_mode = 10;
   */
  swingMode = ClimateSwingMode.CLIMATE_SWING_OFF;

  /**
   * @generated from field: string custom_fan_mode = 11;
   */
  customFanMode = "";

  /**
   * @generated from field: ClimatePreset preset = 12;
   */
  preset = ClimatePreset.NONE;

  /**
   * @generated from field: string custom_preset = 13;
   */
  customPreset = "";

  /**
   * @generated from field: float current_humidity = 14;
   */
  currentHumidity = 0;

  /**
   * @generated from field: float target_humidity = 15;
   */
  targetHumidity = 0;

  constructor(data?: PartialMessage<ClimateStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ClimateStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "mode", kind: "enum", T: proto3.getEnumType(ClimateMode) },
    { no: 3, name: "current_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "target_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "target_temperature_low", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "target_temperature_high", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "unused_legacy_away", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "action", kind: "enum", T: proto3.getEnumType(ClimateAction) },
    { no: 9, name: "fan_mode", kind: "enum", T: proto3.getEnumType(ClimateFanMode) },
    { no: 10, name: "swing_mode", kind: "enum", T: proto3.getEnumType(ClimateSwingMode) },
    { no: 11, name: "custom_fan_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "preset", kind: "enum", T: proto3.getEnumType(ClimatePreset) },
    { no: 13, name: "custom_preset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "current_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 15, name: "target_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClimateStateResponse {
    return new ClimateStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClimateStateResponse {
    return new ClimateStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClimateStateResponse {
    return new ClimateStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClimateStateResponse | PlainMessage<ClimateStateResponse> | undefined, b: ClimateStateResponse | PlainMessage<ClimateStateResponse> | undefined): boolean {
    return proto3.util.equals(ClimateStateResponse, a, b);
  }
}

/**
 * @generated from message ClimateCommandRequest
 */
export class ClimateCommandRequest extends Message<ClimateCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool has_mode = 2;
   */
  hasMode = false;

  /**
   * @generated from field: ClimateMode mode = 3;
   */
  mode = ClimateMode.OFF;

  /**
   * @generated from field: bool has_target_temperature = 4;
   */
  hasTargetTemperature = false;

  /**
   * @generated from field: float target_temperature = 5;
   */
  targetTemperature = 0;

  /**
   * @generated from field: bool has_target_temperature_low = 6;
   */
  hasTargetTemperatureLow = false;

  /**
   * @generated from field: float target_temperature_low = 7;
   */
  targetTemperatureLow = 0;

  /**
   * @generated from field: bool has_target_temperature_high = 8;
   */
  hasTargetTemperatureHigh = false;

  /**
   * @generated from field: float target_temperature_high = 9;
   */
  targetTemperatureHigh = 0;

  /**
   * @generated from field: bool unused_has_legacy_away = 10;
   */
  unusedHasLegacyAway = false;

  /**
   * @generated from field: bool unused_legacy_away = 11;
   */
  unusedLegacyAway = false;

  /**
   * @generated from field: bool has_fan_mode = 12;
   */
  hasFanMode = false;

  /**
   * @generated from field: ClimateFanMode fan_mode = 13;
   */
  fanMode = ClimateFanMode.CLIMATE_FAN_ON;

  /**
   * @generated from field: bool has_swing_mode = 14;
   */
  hasSwingMode = false;

  /**
   * @generated from field: ClimateSwingMode swing_mode = 15;
   */
  swingMode = ClimateSwingMode.CLIMATE_SWING_OFF;

  /**
   * @generated from field: bool has_custom_fan_mode = 16;
   */
  hasCustomFanMode = false;

  /**
   * @generated from field: string custom_fan_mode = 17;
   */
  customFanMode = "";

  /**
   * @generated from field: bool has_preset = 18;
   */
  hasPreset = false;

  /**
   * @generated from field: ClimatePreset preset = 19;
   */
  preset = ClimatePreset.NONE;

  /**
   * @generated from field: bool has_custom_preset = 20;
   */
  hasCustomPreset = false;

  /**
   * @generated from field: string custom_preset = 21;
   */
  customPreset = "";

  /**
   * @generated from field: bool has_target_humidity = 22;
   */
  hasTargetHumidity = false;

  /**
   * @generated from field: float target_humidity = 23;
   */
  targetHumidity = 0;

  constructor(data?: PartialMessage<ClimateCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ClimateCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "has_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "mode", kind: "enum", T: proto3.getEnumType(ClimateMode) },
    { no: 4, name: "has_target_temperature", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "target_temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "has_target_temperature_low", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "target_temperature_low", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "has_target_temperature_high", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "target_temperature_high", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "unused_has_legacy_away", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "unused_legacy_away", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "has_fan_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "fan_mode", kind: "enum", T: proto3.getEnumType(ClimateFanMode) },
    { no: 14, name: "has_swing_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "swing_mode", kind: "enum", T: proto3.getEnumType(ClimateSwingMode) },
    { no: 16, name: "has_custom_fan_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "custom_fan_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "has_preset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "preset", kind: "enum", T: proto3.getEnumType(ClimatePreset) },
    { no: 20, name: "has_custom_preset", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "custom_preset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "has_target_humidity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 23, name: "target_humidity", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClimateCommandRequest {
    return new ClimateCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClimateCommandRequest {
    return new ClimateCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClimateCommandRequest {
    return new ClimateCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClimateCommandRequest | PlainMessage<ClimateCommandRequest> | undefined, b: ClimateCommandRequest | PlainMessage<ClimateCommandRequest> | undefined): boolean {
    return proto3.util.equals(ClimateCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesNumberResponse
 */
export class ListEntitiesNumberResponse extends Message<ListEntitiesNumberResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: float min_value = 6;
   */
  minValue = 0;

  /**
   * @generated from field: float max_value = 7;
   */
  maxValue = 0;

  /**
   * @generated from field: float step = 8;
   */
  step = 0;

  /**
   * @generated from field: bool disabled_by_default = 9;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 10;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: string unit_of_measurement = 11;
   */
  unitOfMeasurement = "";

  /**
   * @generated from field: NumberMode mode = 12;
   */
  mode = NumberMode.AUTO;

  /**
   * @generated from field: string device_class = 13;
   */
  deviceClass = "";

  constructor(data?: PartialMessage<ListEntitiesNumberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesNumberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "max_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "step", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 11, name: "unit_of_measurement", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: proto3.getEnumType(NumberMode) },
    { no: 13, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesNumberResponse {
    return new ListEntitiesNumberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesNumberResponse {
    return new ListEntitiesNumberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesNumberResponse {
    return new ListEntitiesNumberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesNumberResponse | PlainMessage<ListEntitiesNumberResponse> | undefined, b: ListEntitiesNumberResponse | PlainMessage<ListEntitiesNumberResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesNumberResponse, a, b);
  }
}

/**
 * @generated from message NumberStateResponse
 */
export class NumberStateResponse extends Message<NumberStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: float state = 2;
   */
  state = 0;

  /**
   * If the number does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<NumberStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NumberStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumberStateResponse {
    return new NumberStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumberStateResponse {
    return new NumberStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumberStateResponse {
    return new NumberStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NumberStateResponse | PlainMessage<NumberStateResponse> | undefined, b: NumberStateResponse | PlainMessage<NumberStateResponse> | undefined): boolean {
    return proto3.util.equals(NumberStateResponse, a, b);
  }
}

/**
 * @generated from message NumberCommandRequest
 */
export class NumberCommandRequest extends Message<NumberCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: float state = 2;
   */
  state = 0;

  constructor(data?: PartialMessage<NumberCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "NumberCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumberCommandRequest {
    return new NumberCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumberCommandRequest {
    return new NumberCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumberCommandRequest {
    return new NumberCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NumberCommandRequest | PlainMessage<NumberCommandRequest> | undefined, b: NumberCommandRequest | PlainMessage<NumberCommandRequest> | undefined): boolean {
    return proto3.util.equals(NumberCommandRequest, a, b);
  }
}

/**
 * ==================== SELECT ====================
 *
 * @generated from message ListEntitiesSelectResponse
 */
export class ListEntitiesSelectResponse extends Message<ListEntitiesSelectResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: repeated string options = 6;
   */
  options: string[] = [];

  /**
   * @generated from field: bool disabled_by_default = 7;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 8;
   */
  entityCategory = EntityCategory.NONE;

  constructor(data?: PartialMessage<ListEntitiesSelectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesSelectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesSelectResponse {
    return new ListEntitiesSelectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesSelectResponse {
    return new ListEntitiesSelectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesSelectResponse {
    return new ListEntitiesSelectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesSelectResponse | PlainMessage<ListEntitiesSelectResponse> | undefined, b: ListEntitiesSelectResponse | PlainMessage<ListEntitiesSelectResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesSelectResponse, a, b);
  }
}

/**
 * @generated from message SelectStateResponse
 */
export class SelectStateResponse extends Message<SelectStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * If the select does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<SelectStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SelectStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectStateResponse {
    return new SelectStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectStateResponse {
    return new SelectStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectStateResponse {
    return new SelectStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SelectStateResponse | PlainMessage<SelectStateResponse> | undefined, b: SelectStateResponse | PlainMessage<SelectStateResponse> | undefined): boolean {
    return proto3.util.equals(SelectStateResponse, a, b);
  }
}

/**
 * @generated from message SelectCommandRequest
 */
export class SelectCommandRequest extends Message<SelectCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<SelectCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SelectCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SelectCommandRequest {
    return new SelectCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SelectCommandRequest {
    return new SelectCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SelectCommandRequest {
    return new SelectCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SelectCommandRequest | PlainMessage<SelectCommandRequest> | undefined, b: SelectCommandRequest | PlainMessage<SelectCommandRequest> | undefined): boolean {
    return proto3.util.equals(SelectCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesLockResponse
 */
export class ListEntitiesLockResponse extends Message<ListEntitiesLockResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: bool assumed_state = 8;
   */
  assumedState = false;

  /**
   * @generated from field: bool supports_open = 9;
   */
  supportsOpen = false;

  /**
   * @generated from field: bool requires_code = 10;
   */
  requiresCode = false;

  /**
   * Not yet implemented:
   *
   * @generated from field: string code_format = 11;
   */
  codeFormat = "";

  constructor(data?: PartialMessage<ListEntitiesLockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesLockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 8, name: "assumed_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "supports_open", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "requires_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "code_format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesLockResponse {
    return new ListEntitiesLockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesLockResponse {
    return new ListEntitiesLockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesLockResponse {
    return new ListEntitiesLockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesLockResponse | PlainMessage<ListEntitiesLockResponse> | undefined, b: ListEntitiesLockResponse | PlainMessage<ListEntitiesLockResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesLockResponse, a, b);
  }
}

/**
 * @generated from message LockStateResponse
 */
export class LockStateResponse extends Message<LockStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: LockState state = 2;
   */
  state = LockState.NONE;

  constructor(data?: PartialMessage<LockStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LockStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(LockState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockStateResponse {
    return new LockStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockStateResponse {
    return new LockStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockStateResponse {
    return new LockStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LockStateResponse | PlainMessage<LockStateResponse> | undefined, b: LockStateResponse | PlainMessage<LockStateResponse> | undefined): boolean {
    return proto3.util.equals(LockStateResponse, a, b);
  }
}

/**
 * @generated from message LockCommandRequest
 */
export class LockCommandRequest extends Message<LockCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: LockCommand command = 2;
   */
  command = LockCommand.LOCK_UNLOCK;

  /**
   * Not yet implemented:
   *
   * @generated from field: bool has_code = 3;
   */
  hasCode = false;

  /**
   * @generated from field: string code = 4;
   */
  code = "";

  constructor(data?: PartialMessage<LockCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LockCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "command", kind: "enum", T: proto3.getEnumType(LockCommand) },
    { no: 3, name: "has_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockCommandRequest {
    return new LockCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockCommandRequest {
    return new LockCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockCommandRequest {
    return new LockCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockCommandRequest | PlainMessage<LockCommandRequest> | undefined, b: LockCommandRequest | PlainMessage<LockCommandRequest> | undefined): boolean {
    return proto3.util.equals(LockCommandRequest, a, b);
  }
}

/**
 * ==================== BUTTON ====================
 *
 * @generated from message ListEntitiesButtonResponse
 */
export class ListEntitiesButtonResponse extends Message<ListEntitiesButtonResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: string device_class = 8;
   */
  deviceClass = "";

  constructor(data?: PartialMessage<ListEntitiesButtonResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesButtonResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 8, name: "device_class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesButtonResponse {
    return new ListEntitiesButtonResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesButtonResponse {
    return new ListEntitiesButtonResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesButtonResponse {
    return new ListEntitiesButtonResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesButtonResponse | PlainMessage<ListEntitiesButtonResponse> | undefined, b: ListEntitiesButtonResponse | PlainMessage<ListEntitiesButtonResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesButtonResponse, a, b);
  }
}

/**
 * @generated from message ButtonCommandRequest
 */
export class ButtonCommandRequest extends Message<ButtonCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  constructor(data?: PartialMessage<ButtonCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ButtonCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ButtonCommandRequest {
    return new ButtonCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ButtonCommandRequest {
    return new ButtonCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ButtonCommandRequest {
    return new ButtonCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ButtonCommandRequest | PlainMessage<ButtonCommandRequest> | undefined, b: ButtonCommandRequest | PlainMessage<ButtonCommandRequest> | undefined): boolean {
    return proto3.util.equals(ButtonCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesMediaPlayerResponse
 */
export class ListEntitiesMediaPlayerResponse extends Message<ListEntitiesMediaPlayerResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: bool supports_pause = 8;
   */
  supportsPause = false;

  constructor(data?: PartialMessage<ListEntitiesMediaPlayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesMediaPlayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 8, name: "supports_pause", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesMediaPlayerResponse {
    return new ListEntitiesMediaPlayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesMediaPlayerResponse {
    return new ListEntitiesMediaPlayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesMediaPlayerResponse {
    return new ListEntitiesMediaPlayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesMediaPlayerResponse | PlainMessage<ListEntitiesMediaPlayerResponse> | undefined, b: ListEntitiesMediaPlayerResponse | PlainMessage<ListEntitiesMediaPlayerResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesMediaPlayerResponse, a, b);
  }
}

/**
 * @generated from message MediaPlayerStateResponse
 */
export class MediaPlayerStateResponse extends Message<MediaPlayerStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: MediaPlayerState state = 2;
   */
  state = MediaPlayerState.NONE;

  /**
   * @generated from field: float volume = 3;
   */
  volume = 0;

  /**
   * @generated from field: bool muted = 4;
   */
  muted = false;

  constructor(data?: PartialMessage<MediaPlayerStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MediaPlayerStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(MediaPlayerState) },
    { no: 3, name: "volume", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaPlayerStateResponse {
    return new MediaPlayerStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaPlayerStateResponse {
    return new MediaPlayerStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaPlayerStateResponse {
    return new MediaPlayerStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MediaPlayerStateResponse | PlainMessage<MediaPlayerStateResponse> | undefined, b: MediaPlayerStateResponse | PlainMessage<MediaPlayerStateResponse> | undefined): boolean {
    return proto3.util.equals(MediaPlayerStateResponse, a, b);
  }
}

/**
 * @generated from message MediaPlayerCommandRequest
 */
export class MediaPlayerCommandRequest extends Message<MediaPlayerCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: bool has_command = 2;
   */
  hasCommand = false;

  /**
   * @generated from field: MediaPlayerCommand command = 3;
   */
  command = MediaPlayerCommand.PLAY;

  /**
   * @generated from field: bool has_volume = 4;
   */
  hasVolume = false;

  /**
   * @generated from field: float volume = 5;
   */
  volume = 0;

  /**
   * @generated from field: bool has_media_url = 6;
   */
  hasMediaUrl = false;

  /**
   * @generated from field: string media_url = 7;
   */
  mediaUrl = "";

  constructor(data?: PartialMessage<MediaPlayerCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MediaPlayerCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "has_command", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "command", kind: "enum", T: proto3.getEnumType(MediaPlayerCommand) },
    { no: 4, name: "has_volume", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "volume", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "has_media_url", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "media_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaPlayerCommandRequest {
    return new MediaPlayerCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaPlayerCommandRequest {
    return new MediaPlayerCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaPlayerCommandRequest {
    return new MediaPlayerCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MediaPlayerCommandRequest | PlainMessage<MediaPlayerCommandRequest> | undefined, b: MediaPlayerCommandRequest | PlainMessage<MediaPlayerCommandRequest> | undefined): boolean {
    return proto3.util.equals(MediaPlayerCommandRequest, a, b);
  }
}

/**
 * ==================== BLUETOOTH ====================
 *
 * @generated from message SubscribeBluetoothLEAdvertisementsRequest
 */
export class SubscribeBluetoothLEAdvertisementsRequest extends Message<SubscribeBluetoothLEAdvertisementsRequest> {
  /**
   * @generated from field: uint32 flags = 1;
   */
  flags = 0;

  constructor(data?: PartialMessage<SubscribeBluetoothLEAdvertisementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeBluetoothLEAdvertisementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeBluetoothLEAdvertisementsRequest {
    return new SubscribeBluetoothLEAdvertisementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeBluetoothLEAdvertisementsRequest {
    return new SubscribeBluetoothLEAdvertisementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeBluetoothLEAdvertisementsRequest {
    return new SubscribeBluetoothLEAdvertisementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeBluetoothLEAdvertisementsRequest | PlainMessage<SubscribeBluetoothLEAdvertisementsRequest> | undefined, b: SubscribeBluetoothLEAdvertisementsRequest | PlainMessage<SubscribeBluetoothLEAdvertisementsRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeBluetoothLEAdvertisementsRequest, a, b);
  }
}

/**
 * @generated from message BluetoothServiceData
 */
export class BluetoothServiceData extends Message<BluetoothServiceData> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: repeated uint32 legacy_data = 2 [deprecated = true];
   * @deprecated
   */
  legacyData: number[] = [];

  /**
   * Changed in proto version 1.7
   *
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothServiceData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothServiceData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "legacy_data", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothServiceData {
    return new BluetoothServiceData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothServiceData {
    return new BluetoothServiceData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothServiceData {
    return new BluetoothServiceData().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothServiceData | PlainMessage<BluetoothServiceData> | undefined, b: BluetoothServiceData | PlainMessage<BluetoothServiceData> | undefined): boolean {
    return proto3.util.equals(BluetoothServiceData, a, b);
  }
}

/**
 * @generated from message BluetoothLEAdvertisementResponse
 */
export class BluetoothLEAdvertisementResponse extends Message<BluetoothLEAdvertisementResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: sint32 rssi = 3;
   */
  rssi = 0;

  /**
   * @generated from field: repeated string service_uuids = 4;
   */
  serviceUuids: string[] = [];

  /**
   * @generated from field: repeated BluetoothServiceData service_data = 5;
   */
  serviceData: BluetoothServiceData[] = [];

  /**
   * @generated from field: repeated BluetoothServiceData manufacturer_data = 6;
   */
  manufacturerData: BluetoothServiceData[] = [];

  /**
   * @generated from field: uint32 address_type = 7;
   */
  addressType = 0;

  constructor(data?: PartialMessage<BluetoothLEAdvertisementResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothLEAdvertisementResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rssi", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 4, name: "service_uuids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "service_data", kind: "message", T: BluetoothServiceData, repeated: true },
    { no: 6, name: "manufacturer_data", kind: "message", T: BluetoothServiceData, repeated: true },
    { no: 7, name: "address_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothLEAdvertisementResponse {
    return new BluetoothLEAdvertisementResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothLEAdvertisementResponse {
    return new BluetoothLEAdvertisementResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothLEAdvertisementResponse {
    return new BluetoothLEAdvertisementResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothLEAdvertisementResponse | PlainMessage<BluetoothLEAdvertisementResponse> | undefined, b: BluetoothLEAdvertisementResponse | PlainMessage<BluetoothLEAdvertisementResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothLEAdvertisementResponse, a, b);
  }
}

/**
 * @generated from message BluetoothLERawAdvertisement
 */
export class BluetoothLERawAdvertisement extends Message<BluetoothLERawAdvertisement> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: sint32 rssi = 2;
   */
  rssi = 0;

  /**
   * @generated from field: uint32 address_type = 3;
   */
  addressType = 0;

  /**
   * @generated from field: bytes data = 4;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothLERawAdvertisement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothLERawAdvertisement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "rssi", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 3, name: "address_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothLERawAdvertisement {
    return new BluetoothLERawAdvertisement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothLERawAdvertisement {
    return new BluetoothLERawAdvertisement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothLERawAdvertisement {
    return new BluetoothLERawAdvertisement().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothLERawAdvertisement | PlainMessage<BluetoothLERawAdvertisement> | undefined, b: BluetoothLERawAdvertisement | PlainMessage<BluetoothLERawAdvertisement> | undefined): boolean {
    return proto3.util.equals(BluetoothLERawAdvertisement, a, b);
  }
}

/**
 * @generated from message BluetoothLERawAdvertisementsResponse
 */
export class BluetoothLERawAdvertisementsResponse extends Message<BluetoothLERawAdvertisementsResponse> {
  /**
   * @generated from field: repeated BluetoothLERawAdvertisement advertisements = 1;
   */
  advertisements: BluetoothLERawAdvertisement[] = [];

  constructor(data?: PartialMessage<BluetoothLERawAdvertisementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothLERawAdvertisementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "advertisements", kind: "message", T: BluetoothLERawAdvertisement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothLERawAdvertisementsResponse {
    return new BluetoothLERawAdvertisementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothLERawAdvertisementsResponse {
    return new BluetoothLERawAdvertisementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothLERawAdvertisementsResponse {
    return new BluetoothLERawAdvertisementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothLERawAdvertisementsResponse | PlainMessage<BluetoothLERawAdvertisementsResponse> | undefined, b: BluetoothLERawAdvertisementsResponse | PlainMessage<BluetoothLERawAdvertisementsResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothLERawAdvertisementsResponse, a, b);
  }
}

/**
 * @generated from message BluetoothDeviceRequest
 */
export class BluetoothDeviceRequest extends Message<BluetoothDeviceRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: BluetoothDeviceRequestType request_type = 2;
   */
  requestType = BluetoothDeviceRequestType.CONNECT;

  /**
   * @generated from field: bool has_address_type = 3;
   */
  hasAddressType = false;

  /**
   * @generated from field: uint32 address_type = 4;
   */
  addressType = 0;

  constructor(data?: PartialMessage<BluetoothDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "request_type", kind: "enum", T: proto3.getEnumType(BluetoothDeviceRequestType) },
    { no: 3, name: "has_address_type", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "address_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothDeviceRequest {
    return new BluetoothDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothDeviceRequest {
    return new BluetoothDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothDeviceRequest {
    return new BluetoothDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothDeviceRequest | PlainMessage<BluetoothDeviceRequest> | undefined, b: BluetoothDeviceRequest | PlainMessage<BluetoothDeviceRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothDeviceRequest, a, b);
  }
}

/**
 * @generated from message BluetoothDeviceConnectionResponse
 */
export class BluetoothDeviceConnectionResponse extends Message<BluetoothDeviceConnectionResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: bool connected = 2;
   */
  connected = false;

  /**
   * @generated from field: uint32 mtu = 3;
   */
  mtu = 0;

  /**
   * @generated from field: int32 error = 4;
   */
  error = 0;

  constructor(data?: PartialMessage<BluetoothDeviceConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothDeviceConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "connected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "mtu", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothDeviceConnectionResponse {
    return new BluetoothDeviceConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothDeviceConnectionResponse {
    return new BluetoothDeviceConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothDeviceConnectionResponse {
    return new BluetoothDeviceConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothDeviceConnectionResponse | PlainMessage<BluetoothDeviceConnectionResponse> | undefined, b: BluetoothDeviceConnectionResponse | PlainMessage<BluetoothDeviceConnectionResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothDeviceConnectionResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTGetServicesRequest
 */
export class BluetoothGATTGetServicesRequest extends Message<BluetoothGATTGetServicesRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  constructor(data?: PartialMessage<BluetoothGATTGetServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTGetServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTGetServicesRequest {
    return new BluetoothGATTGetServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesRequest {
    return new BluetoothGATTGetServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesRequest {
    return new BluetoothGATTGetServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTGetServicesRequest | PlainMessage<BluetoothGATTGetServicesRequest> | undefined, b: BluetoothGATTGetServicesRequest | PlainMessage<BluetoothGATTGetServicesRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTGetServicesRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTDescriptor
 */
export class BluetoothGATTDescriptor extends Message<BluetoothGATTDescriptor> {
  /**
   * @generated from field: repeated uint64 uuid = 1;
   */
  uuid: bigint[] = [];

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  constructor(data?: PartialMessage<BluetoothGATTDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTDescriptor {
    return new BluetoothGATTDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTDescriptor {
    return new BluetoothGATTDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTDescriptor {
    return new BluetoothGATTDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTDescriptor | PlainMessage<BluetoothGATTDescriptor> | undefined, b: BluetoothGATTDescriptor | PlainMessage<BluetoothGATTDescriptor> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTDescriptor, a, b);
  }
}

/**
 * @generated from message BluetoothGATTCharacteristic
 */
export class BluetoothGATTCharacteristic extends Message<BluetoothGATTCharacteristic> {
  /**
   * @generated from field: repeated uint64 uuid = 1;
   */
  uuid: bigint[] = [];

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: uint32 properties = 3;
   */
  properties = 0;

  /**
   * @generated from field: repeated BluetoothGATTDescriptor descriptors = 4;
   */
  descriptors: BluetoothGATTDescriptor[] = [];

  constructor(data?: PartialMessage<BluetoothGATTCharacteristic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTCharacteristic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "properties", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "descriptors", kind: "message", T: BluetoothGATTDescriptor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTCharacteristic {
    return new BluetoothGATTCharacteristic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTCharacteristic {
    return new BluetoothGATTCharacteristic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTCharacteristic {
    return new BluetoothGATTCharacteristic().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTCharacteristic | PlainMessage<BluetoothGATTCharacteristic> | undefined, b: BluetoothGATTCharacteristic | PlainMessage<BluetoothGATTCharacteristic> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTCharacteristic, a, b);
  }
}

/**
 * @generated from message BluetoothGATTService
 */
export class BluetoothGATTService extends Message<BluetoothGATTService> {
  /**
   * @generated from field: repeated uint64 uuid = 1;
   */
  uuid: bigint[] = [];

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: repeated BluetoothGATTCharacteristic characteristics = 3;
   */
  characteristics: BluetoothGATTCharacteristic[] = [];

  constructor(data?: PartialMessage<BluetoothGATTService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "characteristics", kind: "message", T: BluetoothGATTCharacteristic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTService {
    return new BluetoothGATTService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTService {
    return new BluetoothGATTService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTService {
    return new BluetoothGATTService().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTService | PlainMessage<BluetoothGATTService> | undefined, b: BluetoothGATTService | PlainMessage<BluetoothGATTService> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTService, a, b);
  }
}

/**
 * @generated from message BluetoothGATTGetServicesResponse
 */
export class BluetoothGATTGetServicesResponse extends Message<BluetoothGATTGetServicesResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: repeated BluetoothGATTService services = 2;
   */
  services: BluetoothGATTService[] = [];

  constructor(data?: PartialMessage<BluetoothGATTGetServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTGetServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "services", kind: "message", T: BluetoothGATTService, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTGetServicesResponse {
    return new BluetoothGATTGetServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesResponse {
    return new BluetoothGATTGetServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesResponse {
    return new BluetoothGATTGetServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTGetServicesResponse | PlainMessage<BluetoothGATTGetServicesResponse> | undefined, b: BluetoothGATTGetServicesResponse | PlainMessage<BluetoothGATTGetServicesResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTGetServicesResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTGetServicesDoneResponse
 */
export class BluetoothGATTGetServicesDoneResponse extends Message<BluetoothGATTGetServicesDoneResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  constructor(data?: PartialMessage<BluetoothGATTGetServicesDoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTGetServicesDoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTGetServicesDoneResponse {
    return new BluetoothGATTGetServicesDoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesDoneResponse {
    return new BluetoothGATTGetServicesDoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTGetServicesDoneResponse {
    return new BluetoothGATTGetServicesDoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTGetServicesDoneResponse | PlainMessage<BluetoothGATTGetServicesDoneResponse> | undefined, b: BluetoothGATTGetServicesDoneResponse | PlainMessage<BluetoothGATTGetServicesDoneResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTGetServicesDoneResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTReadRequest
 */
export class BluetoothGATTReadRequest extends Message<BluetoothGATTReadRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  constructor(data?: PartialMessage<BluetoothGATTReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTReadRequest {
    return new BluetoothGATTReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTReadRequest {
    return new BluetoothGATTReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTReadRequest {
    return new BluetoothGATTReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTReadRequest | PlainMessage<BluetoothGATTReadRequest> | undefined, b: BluetoothGATTReadRequest | PlainMessage<BluetoothGATTReadRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTReadRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTReadResponse
 */
export class BluetoothGATTReadResponse extends Message<BluetoothGATTReadResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothGATTReadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTReadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTReadResponse {
    return new BluetoothGATTReadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTReadResponse {
    return new BluetoothGATTReadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTReadResponse {
    return new BluetoothGATTReadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTReadResponse | PlainMessage<BluetoothGATTReadResponse> | undefined, b: BluetoothGATTReadResponse | PlainMessage<BluetoothGATTReadResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTReadResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTWriteRequest
 */
export class BluetoothGATTWriteRequest extends Message<BluetoothGATTWriteRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: bool response = 3;
   */
  response = false;

  /**
   * @generated from field: bytes data = 4;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothGATTWriteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTWriteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "response", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTWriteRequest {
    return new BluetoothGATTWriteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTWriteRequest {
    return new BluetoothGATTWriteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTWriteRequest {
    return new BluetoothGATTWriteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTWriteRequest | PlainMessage<BluetoothGATTWriteRequest> | undefined, b: BluetoothGATTWriteRequest | PlainMessage<BluetoothGATTWriteRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTWriteRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTReadDescriptorRequest
 */
export class BluetoothGATTReadDescriptorRequest extends Message<BluetoothGATTReadDescriptorRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  constructor(data?: PartialMessage<BluetoothGATTReadDescriptorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTReadDescriptorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTReadDescriptorRequest {
    return new BluetoothGATTReadDescriptorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTReadDescriptorRequest {
    return new BluetoothGATTReadDescriptorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTReadDescriptorRequest {
    return new BluetoothGATTReadDescriptorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTReadDescriptorRequest | PlainMessage<BluetoothGATTReadDescriptorRequest> | undefined, b: BluetoothGATTReadDescriptorRequest | PlainMessage<BluetoothGATTReadDescriptorRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTReadDescriptorRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTWriteDescriptorRequest
 */
export class BluetoothGATTWriteDescriptorRequest extends Message<BluetoothGATTWriteDescriptorRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothGATTWriteDescriptorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTWriteDescriptorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTWriteDescriptorRequest {
    return new BluetoothGATTWriteDescriptorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTWriteDescriptorRequest {
    return new BluetoothGATTWriteDescriptorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTWriteDescriptorRequest {
    return new BluetoothGATTWriteDescriptorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTWriteDescriptorRequest | PlainMessage<BluetoothGATTWriteDescriptorRequest> | undefined, b: BluetoothGATTWriteDescriptorRequest | PlainMessage<BluetoothGATTWriteDescriptorRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTWriteDescriptorRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTNotifyRequest
 */
export class BluetoothGATTNotifyRequest extends Message<BluetoothGATTNotifyRequest> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: bool enable = 3;
   */
  enable = false;

  constructor(data?: PartialMessage<BluetoothGATTNotifyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTNotifyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTNotifyRequest {
    return new BluetoothGATTNotifyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyRequest {
    return new BluetoothGATTNotifyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyRequest {
    return new BluetoothGATTNotifyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTNotifyRequest | PlainMessage<BluetoothGATTNotifyRequest> | undefined, b: BluetoothGATTNotifyRequest | PlainMessage<BluetoothGATTNotifyRequest> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTNotifyRequest, a, b);
  }
}

/**
 * @generated from message BluetoothGATTNotifyDataResponse
 */
export class BluetoothGATTNotifyDataResponse extends Message<BluetoothGATTNotifyDataResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<BluetoothGATTNotifyDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTNotifyDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTNotifyDataResponse {
    return new BluetoothGATTNotifyDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyDataResponse {
    return new BluetoothGATTNotifyDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyDataResponse {
    return new BluetoothGATTNotifyDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTNotifyDataResponse | PlainMessage<BluetoothGATTNotifyDataResponse> | undefined, b: BluetoothGATTNotifyDataResponse | PlainMessage<BluetoothGATTNotifyDataResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTNotifyDataResponse, a, b);
  }
}

/**
 * @generated from message SubscribeBluetoothConnectionsFreeRequest
 */
export class SubscribeBluetoothConnectionsFreeRequest extends Message<SubscribeBluetoothConnectionsFreeRequest> {
  constructor(data?: PartialMessage<SubscribeBluetoothConnectionsFreeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeBluetoothConnectionsFreeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeBluetoothConnectionsFreeRequest {
    return new SubscribeBluetoothConnectionsFreeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeBluetoothConnectionsFreeRequest {
    return new SubscribeBluetoothConnectionsFreeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeBluetoothConnectionsFreeRequest {
    return new SubscribeBluetoothConnectionsFreeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeBluetoothConnectionsFreeRequest | PlainMessage<SubscribeBluetoothConnectionsFreeRequest> | undefined, b: SubscribeBluetoothConnectionsFreeRequest | PlainMessage<SubscribeBluetoothConnectionsFreeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeBluetoothConnectionsFreeRequest, a, b);
  }
}

/**
 * @generated from message BluetoothConnectionsFreeResponse
 */
export class BluetoothConnectionsFreeResponse extends Message<BluetoothConnectionsFreeResponse> {
  /**
   * @generated from field: uint32 free = 1;
   */
  free = 0;

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<BluetoothConnectionsFreeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothConnectionsFreeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "free", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothConnectionsFreeResponse {
    return new BluetoothConnectionsFreeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothConnectionsFreeResponse {
    return new BluetoothConnectionsFreeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothConnectionsFreeResponse {
    return new BluetoothConnectionsFreeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothConnectionsFreeResponse | PlainMessage<BluetoothConnectionsFreeResponse> | undefined, b: BluetoothConnectionsFreeResponse | PlainMessage<BluetoothConnectionsFreeResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothConnectionsFreeResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTErrorResponse
 */
export class BluetoothGATTErrorResponse extends Message<BluetoothGATTErrorResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  /**
   * @generated from field: int32 error = 3;
   */
  error = 0;

  constructor(data?: PartialMessage<BluetoothGATTErrorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTErrorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTErrorResponse {
    return new BluetoothGATTErrorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTErrorResponse {
    return new BluetoothGATTErrorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTErrorResponse {
    return new BluetoothGATTErrorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTErrorResponse | PlainMessage<BluetoothGATTErrorResponse> | undefined, b: BluetoothGATTErrorResponse | PlainMessage<BluetoothGATTErrorResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTErrorResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTWriteResponse
 */
export class BluetoothGATTWriteResponse extends Message<BluetoothGATTWriteResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  constructor(data?: PartialMessage<BluetoothGATTWriteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTWriteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTWriteResponse {
    return new BluetoothGATTWriteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTWriteResponse {
    return new BluetoothGATTWriteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTWriteResponse {
    return new BluetoothGATTWriteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTWriteResponse | PlainMessage<BluetoothGATTWriteResponse> | undefined, b: BluetoothGATTWriteResponse | PlainMessage<BluetoothGATTWriteResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTWriteResponse, a, b);
  }
}

/**
 * @generated from message BluetoothGATTNotifyResponse
 */
export class BluetoothGATTNotifyResponse extends Message<BluetoothGATTNotifyResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: uint32 handle = 2;
   */
  handle = 0;

  constructor(data?: PartialMessage<BluetoothGATTNotifyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothGATTNotifyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "handle", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothGATTNotifyResponse {
    return new BluetoothGATTNotifyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyResponse {
    return new BluetoothGATTNotifyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothGATTNotifyResponse {
    return new BluetoothGATTNotifyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothGATTNotifyResponse | PlainMessage<BluetoothGATTNotifyResponse> | undefined, b: BluetoothGATTNotifyResponse | PlainMessage<BluetoothGATTNotifyResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothGATTNotifyResponse, a, b);
  }
}

/**
 * @generated from message BluetoothDevicePairingResponse
 */
export class BluetoothDevicePairingResponse extends Message<BluetoothDevicePairingResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: bool paired = 2;
   */
  paired = false;

  /**
   * @generated from field: int32 error = 3;
   */
  error = 0;

  constructor(data?: PartialMessage<BluetoothDevicePairingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothDevicePairingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "paired", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothDevicePairingResponse {
    return new BluetoothDevicePairingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothDevicePairingResponse {
    return new BluetoothDevicePairingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothDevicePairingResponse {
    return new BluetoothDevicePairingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothDevicePairingResponse | PlainMessage<BluetoothDevicePairingResponse> | undefined, b: BluetoothDevicePairingResponse | PlainMessage<BluetoothDevicePairingResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothDevicePairingResponse, a, b);
  }
}

/**
 * @generated from message BluetoothDeviceUnpairingResponse
 */
export class BluetoothDeviceUnpairingResponse extends Message<BluetoothDeviceUnpairingResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: int32 error = 3;
   */
  error = 0;

  constructor(data?: PartialMessage<BluetoothDeviceUnpairingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothDeviceUnpairingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothDeviceUnpairingResponse {
    return new BluetoothDeviceUnpairingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothDeviceUnpairingResponse {
    return new BluetoothDeviceUnpairingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothDeviceUnpairingResponse {
    return new BluetoothDeviceUnpairingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothDeviceUnpairingResponse | PlainMessage<BluetoothDeviceUnpairingResponse> | undefined, b: BluetoothDeviceUnpairingResponse | PlainMessage<BluetoothDeviceUnpairingResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothDeviceUnpairingResponse, a, b);
  }
}

/**
 * @generated from message UnsubscribeBluetoothLEAdvertisementsRequest
 */
export class UnsubscribeBluetoothLEAdvertisementsRequest extends Message<UnsubscribeBluetoothLEAdvertisementsRequest> {
  constructor(data?: PartialMessage<UnsubscribeBluetoothLEAdvertisementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UnsubscribeBluetoothLEAdvertisementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeBluetoothLEAdvertisementsRequest {
    return new UnsubscribeBluetoothLEAdvertisementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeBluetoothLEAdvertisementsRequest {
    return new UnsubscribeBluetoothLEAdvertisementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeBluetoothLEAdvertisementsRequest {
    return new UnsubscribeBluetoothLEAdvertisementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeBluetoothLEAdvertisementsRequest | PlainMessage<UnsubscribeBluetoothLEAdvertisementsRequest> | undefined, b: UnsubscribeBluetoothLEAdvertisementsRequest | PlainMessage<UnsubscribeBluetoothLEAdvertisementsRequest> | undefined): boolean {
    return proto3.util.equals(UnsubscribeBluetoothLEAdvertisementsRequest, a, b);
  }
}

/**
 * @generated from message BluetoothDeviceClearCacheResponse
 */
export class BluetoothDeviceClearCacheResponse extends Message<BluetoothDeviceClearCacheResponse> {
  /**
   * @generated from field: uint64 address = 1;
   */
  address = protoInt64.zero;

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: int32 error = 3;
   */
  error = 0;

  constructor(data?: PartialMessage<BluetoothDeviceClearCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BluetoothDeviceClearCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "error", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BluetoothDeviceClearCacheResponse {
    return new BluetoothDeviceClearCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BluetoothDeviceClearCacheResponse {
    return new BluetoothDeviceClearCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BluetoothDeviceClearCacheResponse {
    return new BluetoothDeviceClearCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BluetoothDeviceClearCacheResponse | PlainMessage<BluetoothDeviceClearCacheResponse> | undefined, b: BluetoothDeviceClearCacheResponse | PlainMessage<BluetoothDeviceClearCacheResponse> | undefined): boolean {
    return proto3.util.equals(BluetoothDeviceClearCacheResponse, a, b);
  }
}

/**
 * ==================== PUSH TO TALK ====================
 *
 * @generated from message SubscribeVoiceAssistantRequest
 */
export class SubscribeVoiceAssistantRequest extends Message<SubscribeVoiceAssistantRequest> {
  /**
   * @generated from field: bool subscribe = 1;
   */
  subscribe = false;

  constructor(data?: PartialMessage<SubscribeVoiceAssistantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SubscribeVoiceAssistantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeVoiceAssistantRequest {
    return new SubscribeVoiceAssistantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeVoiceAssistantRequest {
    return new SubscribeVoiceAssistantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeVoiceAssistantRequest {
    return new SubscribeVoiceAssistantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeVoiceAssistantRequest | PlainMessage<SubscribeVoiceAssistantRequest> | undefined, b: SubscribeVoiceAssistantRequest | PlainMessage<SubscribeVoiceAssistantRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeVoiceAssistantRequest, a, b);
  }
}

/**
 * @generated from message VoiceAssistantAudioSettings
 */
export class VoiceAssistantAudioSettings extends Message<VoiceAssistantAudioSettings> {
  /**
   * @generated from field: uint32 noise_suppression_level = 1;
   */
  noiseSuppressionLevel = 0;

  /**
   * @generated from field: uint32 auto_gain = 2;
   */
  autoGain = 0;

  /**
   * @generated from field: float volume_multiplier = 3;
   */
  volumeMultiplier = 0;

  constructor(data?: PartialMessage<VoiceAssistantAudioSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "VoiceAssistantAudioSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "noise_suppression_level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "auto_gain", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "volume_multiplier", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceAssistantAudioSettings {
    return new VoiceAssistantAudioSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceAssistantAudioSettings {
    return new VoiceAssistantAudioSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceAssistantAudioSettings {
    return new VoiceAssistantAudioSettings().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceAssistantAudioSettings | PlainMessage<VoiceAssistantAudioSettings> | undefined, b: VoiceAssistantAudioSettings | PlainMessage<VoiceAssistantAudioSettings> | undefined): boolean {
    return proto3.util.equals(VoiceAssistantAudioSettings, a, b);
  }
}

/**
 * @generated from message VoiceAssistantRequest
 */
export class VoiceAssistantRequest extends Message<VoiceAssistantRequest> {
  /**
   * @generated from field: bool start = 1;
   */
  start = false;

  /**
   * @generated from field: string conversation_id = 2;
   */
  conversationId = "";

  /**
   * @generated from field: uint32 flags = 3;
   */
  flags = 0;

  /**
   * @generated from field: VoiceAssistantAudioSettings audio_settings = 4;
   */
  audioSettings?: VoiceAssistantAudioSettings;

  constructor(data?: PartialMessage<VoiceAssistantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "VoiceAssistantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "conversation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "audio_settings", kind: "message", T: VoiceAssistantAudioSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceAssistantRequest {
    return new VoiceAssistantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceAssistantRequest {
    return new VoiceAssistantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceAssistantRequest {
    return new VoiceAssistantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceAssistantRequest | PlainMessage<VoiceAssistantRequest> | undefined, b: VoiceAssistantRequest | PlainMessage<VoiceAssistantRequest> | undefined): boolean {
    return proto3.util.equals(VoiceAssistantRequest, a, b);
  }
}

/**
 * @generated from message VoiceAssistantResponse
 */
export class VoiceAssistantResponse extends Message<VoiceAssistantResponse> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: bool error = 2;
   */
  error = false;

  constructor(data?: PartialMessage<VoiceAssistantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "VoiceAssistantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "error", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceAssistantResponse {
    return new VoiceAssistantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceAssistantResponse {
    return new VoiceAssistantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceAssistantResponse {
    return new VoiceAssistantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceAssistantResponse | PlainMessage<VoiceAssistantResponse> | undefined, b: VoiceAssistantResponse | PlainMessage<VoiceAssistantResponse> | undefined): boolean {
    return proto3.util.equals(VoiceAssistantResponse, a, b);
  }
}

/**
 * @generated from message VoiceAssistantEventData
 */
export class VoiceAssistantEventData extends Message<VoiceAssistantEventData> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<VoiceAssistantEventData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "VoiceAssistantEventData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceAssistantEventData {
    return new VoiceAssistantEventData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceAssistantEventData {
    return new VoiceAssistantEventData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceAssistantEventData {
    return new VoiceAssistantEventData().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceAssistantEventData | PlainMessage<VoiceAssistantEventData> | undefined, b: VoiceAssistantEventData | PlainMessage<VoiceAssistantEventData> | undefined): boolean {
    return proto3.util.equals(VoiceAssistantEventData, a, b);
  }
}

/**
 * @generated from message VoiceAssistantEventResponse
 */
export class VoiceAssistantEventResponse extends Message<VoiceAssistantEventResponse> {
  /**
   * @generated from field: VoiceAssistantEvent event_type = 1;
   */
  eventType = VoiceAssistantEvent.VOICE_ASSISTANT_ERROR;

  /**
   * @generated from field: repeated VoiceAssistantEventData data = 2;
   */
  data: VoiceAssistantEventData[] = [];

  constructor(data?: PartialMessage<VoiceAssistantEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "VoiceAssistantEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(VoiceAssistantEvent) },
    { no: 2, name: "data", kind: "message", T: VoiceAssistantEventData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceAssistantEventResponse {
    return new VoiceAssistantEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceAssistantEventResponse {
    return new VoiceAssistantEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceAssistantEventResponse {
    return new VoiceAssistantEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceAssistantEventResponse | PlainMessage<VoiceAssistantEventResponse> | undefined, b: VoiceAssistantEventResponse | PlainMessage<VoiceAssistantEventResponse> | undefined): boolean {
    return proto3.util.equals(VoiceAssistantEventResponse, a, b);
  }
}

/**
 * @generated from message ListEntitiesAlarmControlPanelResponse
 */
export class ListEntitiesAlarmControlPanelResponse extends Message<ListEntitiesAlarmControlPanelResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: uint32 supported_features = 8;
   */
  supportedFeatures = 0;

  /**
   * @generated from field: bool requires_code = 9;
   */
  requiresCode = false;

  /**
   * @generated from field: bool requires_code_to_arm = 10;
   */
  requiresCodeToArm = false;

  constructor(data?: PartialMessage<ListEntitiesAlarmControlPanelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesAlarmControlPanelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 8, name: "supported_features", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "requires_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "requires_code_to_arm", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesAlarmControlPanelResponse {
    return new ListEntitiesAlarmControlPanelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesAlarmControlPanelResponse {
    return new ListEntitiesAlarmControlPanelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesAlarmControlPanelResponse {
    return new ListEntitiesAlarmControlPanelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesAlarmControlPanelResponse | PlainMessage<ListEntitiesAlarmControlPanelResponse> | undefined, b: ListEntitiesAlarmControlPanelResponse | PlainMessage<ListEntitiesAlarmControlPanelResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesAlarmControlPanelResponse, a, b);
  }
}

/**
 * @generated from message AlarmControlPanelStateResponse
 */
export class AlarmControlPanelStateResponse extends Message<AlarmControlPanelStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: AlarmControlPanelState state = 2;
   */
  state = AlarmControlPanelState.ALARM_STATE_DISARMED;

  constructor(data?: PartialMessage<AlarmControlPanelStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "AlarmControlPanelStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(AlarmControlPanelState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlarmControlPanelStateResponse {
    return new AlarmControlPanelStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlarmControlPanelStateResponse {
    return new AlarmControlPanelStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlarmControlPanelStateResponse {
    return new AlarmControlPanelStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AlarmControlPanelStateResponse | PlainMessage<AlarmControlPanelStateResponse> | undefined, b: AlarmControlPanelStateResponse | PlainMessage<AlarmControlPanelStateResponse> | undefined): boolean {
    return proto3.util.equals(AlarmControlPanelStateResponse, a, b);
  }
}

/**
 * @generated from message AlarmControlPanelCommandRequest
 */
export class AlarmControlPanelCommandRequest extends Message<AlarmControlPanelCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: AlarmControlPanelStateCommand command = 2;
   */
  command = AlarmControlPanelStateCommand.ALARM_CONTROL_PANEL_DISARM;

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  constructor(data?: PartialMessage<AlarmControlPanelCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "AlarmControlPanelCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "command", kind: "enum", T: proto3.getEnumType(AlarmControlPanelStateCommand) },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlarmControlPanelCommandRequest {
    return new AlarmControlPanelCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlarmControlPanelCommandRequest {
    return new AlarmControlPanelCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlarmControlPanelCommandRequest {
    return new AlarmControlPanelCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AlarmControlPanelCommandRequest | PlainMessage<AlarmControlPanelCommandRequest> | undefined, b: AlarmControlPanelCommandRequest | PlainMessage<AlarmControlPanelCommandRequest> | undefined): boolean {
    return proto3.util.equals(AlarmControlPanelCommandRequest, a, b);
  }
}

/**
 * @generated from message ListEntitiesTextResponse
 */
export class ListEntitiesTextResponse extends Message<ListEntitiesTextResponse> {
  /**
   * @generated from field: string object_id = 1;
   */
  objectId = "";

  /**
   * @generated from field: fixed32 key = 2;
   */
  key = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: bool disabled_by_default = 6;
   */
  disabledByDefault = false;

  /**
   * @generated from field: EntityCategory entity_category = 7;
   */
  entityCategory = EntityCategory.NONE;

  /**
   * @generated from field: uint32 min_length = 8;
   */
  minLength = 0;

  /**
   * @generated from field: uint32 max_length = 9;
   */
  maxLength = 0;

  /**
   * @generated from field: string pattern = 10;
   */
  pattern = "";

  /**
   * @generated from field: TextMode mode = 11;
   */
  mode = TextMode.TEXT;

  constructor(data?: PartialMessage<ListEntitiesTextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ListEntitiesTextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled_by_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "entity_category", kind: "enum", T: proto3.getEnumType(EntityCategory) },
    { no: 8, name: "min_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "max_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "mode", kind: "enum", T: proto3.getEnumType(TextMode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntitiesTextResponse {
    return new ListEntitiesTextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntitiesTextResponse {
    return new ListEntitiesTextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntitiesTextResponse {
    return new ListEntitiesTextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntitiesTextResponse | PlainMessage<ListEntitiesTextResponse> | undefined, b: ListEntitiesTextResponse | PlainMessage<ListEntitiesTextResponse> | undefined): boolean {
    return proto3.util.equals(ListEntitiesTextResponse, a, b);
  }
}

/**
 * @generated from message TextStateResponse
 */
export class TextStateResponse extends Message<TextStateResponse> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * If the Text does not have a valid state yet.
   * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
   *
   * @generated from field: bool missing_state = 3;
   */
  missingState = false;

  constructor(data?: PartialMessage<TextStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TextStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "missing_state", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextStateResponse {
    return new TextStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextStateResponse {
    return new TextStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextStateResponse {
    return new TextStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TextStateResponse | PlainMessage<TextStateResponse> | undefined, b: TextStateResponse | PlainMessage<TextStateResponse> | undefined): boolean {
    return proto3.util.equals(TextStateResponse, a, b);
  }
}

/**
 * @generated from message TextCommandRequest
 */
export class TextCommandRequest extends Message<TextCommandRequest> {
  /**
   * @generated from field: fixed32 key = 1;
   */
  key = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<TextCommandRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TextCommandRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 7 /* ScalarType.FIXED32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextCommandRequest {
    return new TextCommandRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextCommandRequest {
    return new TextCommandRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextCommandRequest {
    return new TextCommandRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TextCommandRequest | PlainMessage<TextCommandRequest> | undefined, b: TextCommandRequest | PlainMessage<TextCommandRequest> | undefined): boolean {
    return proto3.util.equals(TextCommandRequest, a, b);
  }
}

