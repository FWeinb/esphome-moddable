// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file api_options.proto (syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, MessageOptions, MethodOptions, proto2 } from "@bufbuild/protobuf";

/**
 * @generated from enum APISourceType
 */
export enum APISourceType {
  /**
   * @generated from enum value: SOURCE_BOTH = 0;
   */
  SOURCE_BOTH = 0,

  /**
   * @generated from enum value: SOURCE_SERVER = 1;
   */
  SOURCE_SERVER = 1,

  /**
   * @generated from enum value: SOURCE_CLIENT = 2;
   */
  SOURCE_CLIENT = 2,
}
// Retrieve enum metadata with: proto2.getEnumType(APISourceType)
proto2.util.setEnumType(APISourceType, "APISourceType", [
  { no: 0, name: "SOURCE_BOTH" },
  { no: 1, name: "SOURCE_SERVER" },
  { no: 2, name: "SOURCE_CLIENT" },
]);

/**
 * @generated from message void
 */
export class void$ extends Message<void$> {
  constructor(data?: PartialMessage<void$>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "void";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): void$ {
    return new void$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): void$ {
    return new void$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): void$ {
    return new void$().fromJsonString(jsonString, options);
  }

  static equals(a: void$ | PlainMessage<void$> | undefined, b: void$ | PlainMessage<void$> | undefined): boolean {
    return proto2.util.equals(void$, a, b);
  }
}

/**
 * @generated from extension: optional bool needs_setup_connection = 1038 [default = true];
 */
export const needs_setup_connection = proto2.makeExtension<MethodOptions, boolean>(
  "needs_setup_connection", 
  MethodOptions, 
  { no: 1038, kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
);

/**
 * @generated from extension: optional bool needs_authentication = 1039 [default = true];
 */
export const needs_authentication = proto2.makeExtension<MethodOptions, boolean>(
  "needs_authentication", 
  MethodOptions, 
  { no: 1039, kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
);

/**
 * @generated from extension: optional uint32 id = 1036 [default = 0];
 */
export const id = proto2.makeExtension<MessageOptions, number>(
  "id", 
  MessageOptions, 
  { no: 1036, kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true, default: 0 },
);

/**
 * @generated from extension: optional APISourceType source = 1037 [default = SOURCE_BOTH];
 */
export const source = proto2.makeExtension<MessageOptions, APISourceType>(
  "source", 
  MessageOptions, 
  () => ({ no: 1037, kind: "enum", T: proto2.getEnumType(APISourceType), opt: true, default: APISourceType.SOURCE_BOTH }),
);

/**
 * @generated from extension: optional string ifdef = 1038;
 */
export const ifdef = proto2.makeExtension<MessageOptions, string>(
  "ifdef", 
  MessageOptions, 
  { no: 1038, kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
);

/**
 * @generated from extension: optional bool log = 1039 [default = true];
 */
export const log = proto2.makeExtension<MessageOptions, boolean>(
  "log", 
  MessageOptions, 
  { no: 1039, kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
);

/**
 * @generated from extension: optional bool no_delay = 1040 [default = false];
 */
export const no_delay = proto2.makeExtension<MessageOptions, boolean>(
  "no_delay", 
  MessageOptions, 
  { no: 1040, kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
);

